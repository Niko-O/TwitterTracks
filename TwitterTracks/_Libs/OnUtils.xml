<?xml version="1.0"?>
<doc>
<assembly>
<name>
OnUtils
</name>
</assembly>
<members>
<member name="M:OnUtils.WinApi.AeroGlass.ExtendFrameIntoClientArea(System.IntPtr,OnUtils.WinApi.Native.Margins)">
	<summary>
 Wrappt DwmExtendFrameIntoClientArea.
 Legt die Breiten der Ränder (Abstand zwischen Client-Bereich und äußeren Fensterkante) des Fensters, das durch <paramref name="HWnd"/> angegeben ist fest.
 Rufen Sie diese Funktion mit einem <see cref="T:OnUtils.WinApi.Native.Margins"/>-Objekt auf, bei dem alle Abstände auf -1 gesetzt sind, um das ganze Fenster zu AeroGlass-Fenster zu machen.
 </summary>
	<param name="HWnd">Das Handle des Fensters.</param>
	<param name="Margins">Die Breiten der Ränder.</param>
</member><member name="M:OnUtils.WinApi.AeroGlass.SetMarginsForWpfWindow(System.Windows.Window,OnUtils.WinApi.Native.Margins)">
	<summary>
 Bestimmt das Handle des angegebenen WPF-Fensters und ruft <see cref="M:OnUtils.WinApi.AeroGlass.ExtendFrameIntoClientArea(System.IntPtr,OnUtils.WinApi.Native.Margins)"/> auf.
 Beachten Sie, dass dafür die <see cref="P:System.Windows.Controls.Control.Background"/>-Property des angegebenen Fensters auf <see cref="P:System.Windows.Media.Brushes.Transparent"/> festgelegt wird.
 </summary>
	<param name="Window">Das Fenster, dessen Ränder festgelegt werden.</param>
	<param name="Margins">Die Breiten der Ränder.</param>
</member><member name="M:OnUtils.WinApi.AeroGlass.SetMarginsForFormsWindow(System.Windows.Forms.Form,OnUtils.WinApi.Native.Margins)">
	<summary>
 Ruft für das Handle des angegebenen Fensters <see cref="M:OnUtils.WinApi.AeroGlass.ExtendFrameIntoClientArea(System.IntPtr,OnUtils.WinApi.Native.Margins)"/> auf.
 Beachten Sie, dass dafür die <see cref="P:System.Windows.Forms.Form.BackColor"/>-Property des angegebenen Fensters auf <see cref="P:System.Drawing.Color.Black"/> und die <see cref="P:System.Windows.Forms.Form.TransparencyKey"/>-Property auf <see cref="F:System.Drawing.Color.Empty"/> festgelegt wird.
 </summary>
	<param name="Window">Das Fenster, dessen Ränder festgelegt werden.</param>
	<param name="Margins">Die Breiten der Ränder.</param>
</member><member name="T:OnUtils.WinApi.AeroGlass">
	<summary>
 Enthält Methoden, die mit DwmComposition zu tun haben.
 </summary>
</member><member name="P:OnUtils.Wpf.ObservableCollectionSource`1.SourceCollection">
	<summary>
 Die <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>, aus der die Daten verwendet werden.
 </summary>
</member><member name="M:OnUtils.Wpf.ObservableCollectionSource`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewSourceCollection"><see cref="P:OnUtils.Wpf.ObservableCollectionSource`1.SourceCollection"/></param>
</member><member name="T:OnUtils.Wpf.ObservableCollectionSource`1">
	<summary>
 Implementiert eine Datenquelle für <see cref="T:OnUtils.Wpf.ViewModelBase`1"/>, die Daten aus einer <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> verwendet.
 </summary>
	<typeparam name="T">Der Typ der Elemente.</typeparam>
</member><member name="T:OnUtils.Wpf.Converters.BooleanNotConverter">
	<summary>
 Negiert einen Boolean-Wert.
 </summary>
</member><member name="E:OnUtils.Wpf.DelegateCommand.CanExecuteChanged">
	<summary>
 Siehe <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/>.
 </summary>
</member><member name="M:OnUtils.Wpf.DelegateCommand.OnCanExecuteChanged">
	<summary>
 Löst das <see cref="E:OnUtils.Wpf.DelegateCommand.CanExecuteChanged"/>-Event aus
 </summary>
</member><member name="P:OnUtils.Wpf.DelegateCommand.IsEnabled">
	<summary>
 Gibt an, ob das Command ausgeführt werden kann. Wurde im Konstruktor ein Callback für IsEnabled angegeben, hat das manuelle Setzen dieser Property keinen Effekt.
 </summary>
</member><member name="M:OnUtils.Wpf.DelegateCommand.#ctor">
	<summary>
 Setzt keine Callbacks. Die <see cref="M:OnUtils.Wpf.DelegateCommand.Execute(System.Object)"/>-Funktion muss überschrieben werden.
 <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> ist standardmäßig True.
 </summary>
</member><member name="M:OnUtils.Wpf.DelegateCommand.#ctor(System.Action{System.Object})">
	<summary>
 Parameter wird an Delegaten übergeben.
 CanExecute gibt <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> zurück.
 <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> ist standardmäßig True.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
</member><member name="M:OnUtils.Wpf.DelegateCommand.#ctor(System.Action)">
	<summary>
 Command-Parameter wird ignoriert.
 CanExecute gibt <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> zurück.
 <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> ist standardmäßig True.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
</member><member name="M:OnUtils.Wpf.DelegateCommand.#ctor(System.Action{System.Object},System.Boolean)">
	<summary>
 Command-Parameter wird an Delegaten übergeben.
 CanExecute gibt <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> zurück.
 <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> ist standardmäßig <paramref name="NewIsEnabled"/>.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
	<param name="NewIsEnabled">Gibt den Standardwert von <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> an.</param>
</member><member name="M:OnUtils.Wpf.DelegateCommand.#ctor(System.Action,System.Boolean)">
	<summary>
 Command-Parameter wird ignoriert.
 CanExecute gibt <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> zurück.
 <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> ist standardmäßig <paramref name="NewIsEnabled"/>.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
	<param name="NewIsEnabled">Gibt den Standardwert von <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> an.</param>
</member><member name="M:OnUtils.Wpf.DelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Boolean})">
	<summary>
 Command-Parameter wird an Delegaten übergeben.
 CanExecute gibt den Wert des Callbacks <paramref name="NewIsEnabledCallback"/> zurück.
 Das manuelle Setzen von <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> löst das IsEnabledCallback erneut aus.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
	<param name="NewIsEnabledCallback">Ein Delegat, der zurückgibt, ob das Command ausgeführt werden kann.</param>
</member><member name="M:OnUtils.Wpf.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
	<summary>
 Command-Parameter wird ignoriert.
 CanExecute gibt den Wert des Callbacks <paramref name="NewIsEnabledCallback"/> zurück.
 Das manuelle Setzen von <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> löst das IsEnabledCallback erneut aus.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
	<param name="NewIsEnabledCallback">Ein Delegat, der zurückgibt, ob das Command ausgeführt werden kann.</param>
</member><member name="M:OnUtils.Wpf.DelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
	<summary>
 Command-Parameter wird an Delegaten übergeben.
 CanExecute gibt den Wert des Callbacks <paramref name="NewIsEnabledCallback"/> zurück.
 Das manuelle Setzen von <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> löst das IsEnabledCallback erneut aus.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
	<param name="NewIsEnabledCallback">Ein Delegat, der zurückgibt, ob das Command ausgeführt werden kann.</param>
</member><member name="M:OnUtils.Wpf.DelegateCommand.#ctor(System.Action,System.Func{System.Object,System.Boolean})">
	<summary>
 Command-Parameter wird ignoriert.
 CanExecute gibt den Wert des Callbacks <paramref name="NewIsEnabledCallback"/> zurück.
 Das manuelle Setzen von <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> löst das IsEnabledCallback erneut aus.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
	<param name="NewIsEnabledCallback">Ein Delegat, der zurückgibt, ob das Command ausgeführt werden kann.</param>
</member><member name="M:OnUtils.Wpf.DelegateCommand.CanExecute(System.Object)">
	<summary>
 Gibt True zurück, wenn das Command ausgeführt werden kann, ansonsten False.
 </summary>
	<param name="Parameter">Der Command-Parameter.</param>
</member><member name="M:OnUtils.Wpf.DelegateCommand.Execute(System.Object)">
	<summary>
 Führt das Callback aus, das im Konstruktor angegeben wurde. Kann überschrieben werden, um ein eigenes Verhalten zu implementieren.
 </summary>
	<param name="Parameter">Der Command-Parameter.</param>
</member><member name="T:OnUtils.Wpf.DelegateCommand">
	<summary>
 Stellt ein ICommand dar, das einen Delegaten ausführt.
 Der Delegat kann entweder keine oder ein Argument vom Typ Object entgegennehmen.
 Die <see cref="M:OnUtils.Wpf.DelegateCommand.CanExecute(System.Object)"/>-Funktion gibt immer True zurück, kann jedoch überschrieben werden.
 </summary>
</member><member name="P:OnUtils.Wpf.IViewModel`1.Target">
	<summary>
 Das Objekt, dem dieses ViewModel zugeordnet ist.
 </summary>
</member><member name="T:OnUtils.Wpf.IViewModel`1">
	<summary>
 Stellt ein ViewModel für die Verwendung mit <see cref="T:OnUtils.Wpf.ViewModelCollection`2"/> dar.
 </summary>
	<typeparam name="T">Der Typ des Objektes, dem dieses ViewModel zugeordnet ist.</typeparam>
</member><member name="M:OnUtils.WinApi.DwmColorization.GetDwmColorization">
	<summary>
 Ruft die Desktop-Farbe unter Windows 7 und höher ab.
 </summary>
</member><member name="T:OnUtils.WinApi.DwmColorization">
	<summary>
 Beinhaltet WinApi-Aufrufe, die mit Aero-Dekstop-Farbe unter Windows Vista und höher zu tun haben.
 </summary>
</member><member name="T:OnUtils.Extensions.AttributeExtensions.TypeWithAttributes`1">
	<summary>
 Gruppiert einen Typ und zugehörige Attribute
 </summary>
</member><member name="M:OnUtils.Extensions.AttributeExtensions.SubTypesWithAttribute``1(System.Type)">
	<summary>
 Gibt alle Typen in der Assembly dieses Typs zurück, die von diesem Typ abgeleitet sind und mindestens ein Attribut vom Typ T besitzen.
 </summary>
	<typeparam name="T">Der Typ des Attributs, das die abgeleiteten Typen besitzen müssen.</typeparam>
</member><member name="M:OnUtils.Extensions.AttributeExtensions.GetFieldAttributes``1(System.Enum)">
	<summary>
 Gibt alle Attribute vom Typ T dieses Enum-Feldes zurück.
 </summary>
	<typeparam name="T">Der Typ der zu suchenden Attribute.</typeparam>
</member><member name="M:OnUtils.Extensions.AttributeExtensions.GetFieldAttribute``1(System.Enum)">
	<summary>
 Gibt das Attribut vom Typ T dieses Enum-Feldes.
 Das Attribut darf nur 1 Mal gesetzt sein.
 </summary>
	<typeparam name="T">Der Typ des zu suchenden Attributs.</typeparam>
	<exception cref="T:System.ArgumentException">Das Attribut wurde 0 Mal gefunden.</exception>
	<exception cref="T:System.ArgumentException">Das Attribut wurde mehr als 1 Mal gefunden.</exception>
</member><member name="M:OnUtils.Extensions.AttributeExtensions.GetTypeAttributes``1(System.Object)">
	<summary>
 Gibt alle Attribute vom Typ TAttribute des Laufzeittyps dieses Objektes zurück.
 </summary>
	<typeparam name="T">Der Typ der zu suchenden Attribute.</typeparam>
</member><member name="M:OnUtils.Extensions.AttributeExtensions.GetTypeAttribute``1(System.Object)">
	<summary>
 Gibt das Attribut vom Typ T des Laufzeittyps dieses Objektes zurück.
 Das Attribut darf nur 1 Mal gesetzt sein.
 </summary>
	<typeparam name="T">Der Typ des zu suchenden Attributs.</typeparam>
	<exception cref="T:System.ArgumentException">Das Attribut wurde 0 Mal gefunden.</exception>
	<exception cref="T:System.ArgumentException">Das Attribut wurde mehr als 1 Mal gefunden.</exception>
</member><member name="M:OnUtils.Extensions.AttributeExtensions.GetAttributes``1(System.Type)">
	<summary>
 Gibt alle Attribute dieses Typs vom Typ T zurück.
 </summary>
</member><member name="M:OnUtils.Extensions.AttributeExtensions.GetAttribute``1(System.Type)">
	<summary>
 Gibt das Attribut vom Typ T dieses Typs zurück.
 Das Attribut darf nur 1 Mal gesetzt sein.
 </summary>
	<typeparam name="T">Der Typ des zu suchenden Attributs.</typeparam>
	<exception cref="T:System.ArgumentException">Das Attribut wurde 0 Mal gefunden.</exception>
	<exception cref="T:System.ArgumentException">Das Attribut wurde mehr als 1 Mal gefunden.</exception>
</member><member name="T:OnUtils.Extensions.AttributeExtensions">
	<summary>
 Beinhaltet Erweiterungsmethoden für die Interaktion mit Attributen.
 </summary>
</member><member name="T:OnUtils.MultithreadingAwarenessAttribute">
	<summary>
 Dient der Dokumentation, dass ein Programmelement protenziell von mehreren Threads gleichzeitig verwendet wird und dies bei der Implementierung berücksichtigt werden muss.
 </summary>
</member><member name="P:OnUtils.Wpf.Converters.ListToStringConverter.Delimiter">
	<summary>
 Gibt an, mit welchem Text die Elemente verknüpft werden.
 </summary>
</member><member name="T:OnUtils.Wpf.Converters.ListToStringConverter">
	<summary>
 Konvertiert ein <see cref="T:System.Collections.IEnumerable"/> mithilfe von <see cref="T:System.String"/> zu einem String. Gibt <see cref="T:System.String"/> zurück, wenn das Objekt null/Nothing ist oder die Liste keine Elemente beinhaltet.
 </summary>
</member><member name="P:OnUtils.Wpf.DependencyAttribute.DependsOn">
	<summary>
 Die Properties, von denen diese Property abhängt.
 </summary>
</member><member name="T:OnUtils.Wpf.DependencyAttribute">
	<summary>
 Gibt an, dass die Property, auf die das Attribut angewendet wird, von den Properties in <see cref="P:OnUtils.Wpf.DependencyAttribute.DependsOn"/> abhängt.
 Somit wird das <see cref="E:OnUtils.Wpf.NotifyPropertyChanged.PropertyChanged"/>-Event für diese Property ebenfalls ausgelöst, wenn es für eine der Properties in <see cref="P:OnUtils.Wpf.DependencyAttribute.DependsOn"/> ausgelöst wird.
 </summary>
</member><member name="P:OnUtils.SubSetList`2.SuperSet">
	<summary>
 Die Auflistung, in der die Elemente dieser Liste dupliziert werden.
 </summary>
</member><member name="M:OnUtils.SubSetList`2.#ctor(System.Collections.Generic.IList{`1})">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewSuperSet"><see cref="P:OnUtils.SubSetList`2.SuperSet"/></param>
</member><member name="M:OnUtils.SubSetList`2.#ctor(System.Collections.Generic.IList{`1},System.Int32)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewSuperSet"><see cref="P:OnUtils.SubSetList`2.SuperSet"/></param>
	<param name="Capacity">Gibt die Anfangskapazität der Liste an. Für Details siehe entsprechenden Konstruktor in <see cref="T:System.Collections.Generic.List`1"/></param>
</member><member name="M:OnUtils.SubSetList`2.#ctor(System.Collections.Generic.IList{`1},System.Collections.Generic.IEnumerable{`0})">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewSuperSet"><see cref="P:OnUtils.SubSetList`2.SuperSet"/></param>
	<param name="SourceItems">Die Elemente, mit denen diese Liste befüllt wird. Für Details siehe entsprechenden Konstruktor in <see cref="T:System.Collections.Generic.List`1"/></param>
</member><member name="M:OnUtils.SubSetList`2.Add(`0)">
	<summary>
 Fügt das Element dieser Liste hinzu.
 </summary>
	<param name="item">Das hinzuzufügende Element.</param>
</member><member name="M:OnUtils.SubSetList`2.Clear">
	<summary>
 Löscht alle Elemente aus dieser Liste.
 </summary>
</member><member name="M:OnUtils.SubSetList`2.Contains(`0)">
	<summary>
 Prüft, ob das angegebene Element in dieser Liste enthalten ist. Sollte das Element extern aus <see cref="P:OnUtils.SubSetList`2.SuperSet"/> entfernt worden sein, wird trotzdem True zurückgegeben.
 </summary>
	<param name="item">Das zu suchende Element.</param>
</member><member name="M:OnUtils.SubSetList`2.CopyTo(`0[],System.Int32)">
	<summary>
 Kopiert Elemente aus dieser Liste in das angegebene Array, beginnend am angegebenen Index.
 </summary>
	<param name="array">Das Array, in das die Elemente kopiert werden.</param>
	<param name="arrayIndex">Der Index des ersten Elementes im Array.</param>
</member><member name="P:OnUtils.SubSetList`2.Count">
	<summary>
 Gibt die Anzahl an Elementen in dieser Liste zurück. Dies ist nicht die Anzahl an Elementen in der Übermenge.
 </summary>
</member><member name="P:OnUtils.SubSetList`2.IsReadOnly">
	<summary>
 False
 </summary>
</member><member name="M:OnUtils.SubSetList`2.Remove(`0)">
	<summary>
 Entfernt alle Vorkommnisse des angegebene Elements aus dieser Liste und der Übermenge. Gibt True zurück, wenn das Element vor dem Aufruf ein Teil dieser Liste war, andernfalls False.
 </summary>
	<param name="item">Das zu entfernende Element.</param>
</member><member name="M:OnUtils.SubSetList`2.GetEnumerator">
	<summary>
 Gibt einen Enumerator für diese Liste zurück. Dies beinhaltet nicht die Elemente in der Übermenge.
 </summary>
</member><member name="M:OnUtils.SubSetList`2.IndexOf(`0)">
	<summary>
 Gibt den ersten Index des angegebenen Elementes in dieser Liste zurück. Der Index bezieht sich nicht auf die Übermenge.
 </summary>
	<param name="item">Das Element, dessen Index gesucht wird.</param>
</member><member name="M:OnUtils.SubSetList`2.Insert(System.Int32,`0)">
	<summary>
 Fügt das angegebene Element in dieser Liste am angegebenen Index ein. Das Element wird trotzdem am Ende der Übermenge eingefügt.
 </summary>
	<param name="index">Das einzufügende Element.</param>
	<param name="item">Der Index, an dem das Element eingefügt wird.</param>
</member><member name="P:OnUtils.SubSetList`2.Item(System.Int32)">
	<summary>
 Ruft das Element am angegebenen Index an oder legt es fest.
 Der Index bezieht sich nur auf diese Liste und nicht auf die Übermenge.
 Wenn die Übermenge beim Setzen eines Elementes das ursprüngliche Element enthält wird das erste Vorkommen des urprünglichen Elementes in der Übermenge durch das neue Element ersetzt.
 </summary>
</member><member name="M:OnUtils.SubSetList`2.RemoveAt(System.Int32)">
	<summary>
 Entfernt das Element am angegebenen Index aus dieser Liste. In der Übermenge wird das erste Vorkommen des Elements, das sich am angegebenen Index in dieser Liste befindet, ebenfalls entfernt.
 </summary>
	<param name="index">Der Index des zu entfernenden Elements.</param>
</member><member name="T:OnUtils.SubSetList`2">
	<summary>
 Eine Auflistung, die eine Untermenge aus einer anderen Menge darstellt. Die Übermenge kann zusätzliche Elemente beinhalten, die von dieser Liste nicht beachtet werden.
 Diese Liste ignoriert Änderungen, die von externem Code an der Übermenge durchgeführt wurden. Siehe als Beispiel <see cref="M:OnUtils.SubSetList`2.Contains(`0)"/>.
 </summary>
	<typeparam name="TThis">Der Typ der Elemente, die sich in dieser Liste befinden. Muss von TSuper abgeleitet sein.</typeparam>
	<typeparam name="TSuper">Der Typ der Elemente in der Übermenge.</typeparam>
</member><member name="T:OnUtils.WinApi.MouseAction">
	<summary>
 Gibt eine Maus-Aktion an. Kann kombiniert werden.
 </summary>
</member><member name="T:OnUtils.Wpf.CommandDependencyAttribute">
	<summary>
 Gibt an, dass das Command, auf das das Attribut angewendet wird, von den Properties, die im Konstruktor angegeben sind, abhängt.
 Somit wird das <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/>-Event für dieses Command ausgelöst, wenn das <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>-Event für eine der Properties in <see cref="P:OnUtils.Wpf.DependencyAttribute.DependsOn"/> ausgelöst wird.
 </summary>
</member><member name="P:OnUtils.MaskingException.UnderlyingException">
	<summary>
 Die Exception, derer Informationen verwendet werden.
 </summary>
</member><member name="M:OnUtils.MaskingException.#ctor(System.Exception)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewUnderlyingException">Siehe <see cref="P:OnUtils.MaskingException.UnderlyingException"/>.</param>
</member><member name="P:OnUtils.MaskingException.Data">
	<summary>
		<see cref="P:System.Exception.Data"/>
	</summary>
</member><member name="M:OnUtils.MaskingException.Equals(System.Object)">
	<summary>
		<see cref="M:System.Object.Equals(System.Object)"/>
	</summary>
</member><member name="M:OnUtils.MaskingException.GetBaseException">
	<summary>
		<see cref="M:System.Exception.GetBaseException"/>
	</summary>
</member><member name="M:OnUtils.MaskingException.GetHashCode">
	<summary>
		<see cref="M:System.Object.GetHashCode"/>
	</summary>
</member><member name="M:OnUtils.MaskingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
		<see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
	</summary>
</member><member name="P:OnUtils.MaskingException.HelpLink">
	<summary>
		<see cref="P:System.Exception.HelpLink"/>
	</summary>
</member><member name="P:OnUtils.MaskingException.Message">
	<summary>
		<see cref="P:System.Exception.Message"/>
	</summary>
</member><member name="P:OnUtils.MaskingException.Source">
	<summary>
		<see cref="P:System.Exception.Source"/>
	</summary>
</member><member name="P:OnUtils.MaskingException.StackTrace">
	<summary>
		<see cref="P:System.Exception.StackTrace"/>
	</summary>
</member><member name="M:OnUtils.MaskingException.ToString">
	<summary>
		<see cref="M:System.Exception.ToString"/>
	</summary>
</member><member name="T:OnUtils.MaskingException">
	<summary>
 Verknüpft rekursiv alle Informationen der im Konstruktor angegebenen Exception und derer InnerExceptions.
 Ausgelegt auf die Verwendung mit <see cref="M:OnUtils.Helpers.ShowThreadExceptionDialog(System.Exception)"/> bzw. <see cref="T:System.Windows.Forms.ThreadExceptionDialog"/>.
 </summary>
</member><member name="P:OnUtils.Singleton`1.Instance">
	<summary>
 Gibt die Instanz dieses Typs zurück bzw. erstellt eine Instanz, wenn dies der erste Aufruf ist.
 </summary>
</member><member name="T:OnUtils.Singleton`1">
	<summary>
 Stellt eine Basisklasse für Singletons bereit.
 Erben Sie von dieser Klasse und geben Sie als Typenparameter die eigene Klasse an, um das Pattern zu implementieren.
 </summary>
	<typeparam name="T">Der Typ der <see cref="P:OnUtils.Singleton`1.Instance"/>-Property. Sollte der Typ sein, auf den ds Singleton-Pattern angewandt wird.</typeparam>
</member><member name="P:OnUtils.Streams.SerialPortDataSource.Port">
	<summary>
 Das Port, dessen Daten gepuffert werden.
 </summary>
</member><member name="M:OnUtils.Streams.SerialPortDataSource.#ctor(System.IO.Ports.SerialPort)">
	<summary>
 Konstruktor.
 </summary>
</member><member name="T:OnUtils.Streams.SerialPortDataSource">
	<summary>
 Eine Datenquelle zum Puffern von <see cref="T:System.IO.Ports.SerialPort"/>.
 </summary>
</member><member name="M:OnUtils.Helpers.GetAbsolutePath(System.String)">
	<summary>
 Möglicherweise unnötig. Siehe <see cref="M:System.IO.Path.GetFullPath(System.String)"/>.
 Gibt einen absoluten Pfad zurück, der durch einen relativen Pfad beschrieben wird. ".." als Ordnername wechselt in den übergeordneten Ordner.
 Beispiel: "C:\Temp\Ordner1\..\..\Users\Administrator\Desktop" wird zu "C:\Users\Administrator\Desktop" aufgelöst.
 Verwenden Sie diese Funktion in Verbindung mit beispielsweise <see cref="T:System.IO.Path"/>.Combine(System.Windows.Forms.Application.StartupPath, "..", "..", "..")
 </summary>
	<param name="RelativePath">Der relative Pfad, aus dem der absolute Pfad gebildet werden soll.</param>
	<exception cref="T:System.ArgumentException">Der relative Pfad versucht, über den übergeordnetsten Ordner hinaus zu wechseln. Beispiel: "C:\Users\..\..\.."
 "C:\.." würde "" ergeben, "C:\..\.." kann nicht aus "" hinausgehen.</exception>
</member><member name="M:OnUtils.Helpers.GetAbsolutePath(System.String[])">
	<summary>
 Siehe <see cref="M:OnUtils.Helpers.GetAbsolutePath(System.String)"/>.
 Kombiniert die angegebenen Pfadteile mit <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>.
 </summary>
</member><member name="M:OnUtils.Helpers.GetObjectAddress(System.Object)">
	<summary>
 Gibt die Adresse des angegebenen Objektes zurück. Weil man's kann.
 Für Details siehe auch http://stackoverflow.com/questions/4994277
 </summary>
	<param name="Value">Das Objekt, dessen Adresse zurückgegeben wird.</param>
</member><member name="M:OnUtils.Helpers.MessageBox(System.String)">
	<summary>
 Zeigt eine <see cref="T:System.Windows.Forms.MessageBox"/> mit der angegebenen Meldung an.
 Gedacht für Konsolenanwendungen, damit nicht extra der Import auf System.Windows.Forms.dll gesetzt werden muss.
 Sollte wirklich nur zum Teten verwendet werden (z.B. wenn das Konsolenfenster nicht sichtbar ist).
 </summary>
	<param name="Message">Die angezeigte Meldung.</param>
</member><member name="M:OnUtils.Helpers.SetClipboard(System.String)">
	<summary>
 Kopiert den angegebenen Text in die Zwischenablage. Verwendet <see cref="T:System.Windows.Forms.Clipboard"/>.
 </summary>
	<param name="Text">Der Text, der in die Zwischenablage kopiert wird.</param>
</member><member name="M:OnUtils.Helpers.GetClipboard">
	<summary>
 Ruft den Text ab, der zuletzt in die Zwischenablage kopiert wurde. Verwendet <see cref="T:System.Windows.Forms.Clipboard"/>.
 </summary>
</member><member name="M:OnUtils.Helpers.GetEnumValues``1">
	<summary>
 Gibt alle Elemente des Enum-Typs zurück.
 </summary>
	<typeparam name="T">Der Enum-Typ dessen Elemente zurückgegeben werden.</typeparam>
	<exception cref="T:System.Data.InvalidConstraintException">T ist kein Enum-Typ.</exception>
</member><member name="M:OnUtils.Helpers.EnumToUnderlyingType(System.Enum)">
	<summary>
 Gibt einen in Object geboxten Wert zurück, dessen Typ dem zugrundeliegenden Typ dieses Enum-Wertes entspricht.
 Für einen Wert X eines Enum-Typs T sind die folgenden 3 Typen äquivalent:
 1: EnumToUnderlyingType(X).<see cref="M:System.Object.GetType"/>()
 2: X.<see cref="M:System.Object.GetType"/>().<see cref="M:System.Type.GetEnumUnderlyingType"/>()
 3: GetType(T).<see cref="M:System.Type.GetEnumUnderlyingType"/>()
 </summary>
</member><member name="M:OnUtils.Helpers.AsyncSleep(System.TimeSpan,System.Action)">
	<summary>
 Verzögert einmalig das Ausführen der Methode asynchron um eine angegebene Zeitspanne.
 </summary>
	<param name="Delay">Die Zeitspanne, um die die Ausführung verzögert wird.</param>
	<param name="Callback">Die Methode, die verzögert ausgeführt wird.</param>
</member><member name="M:OnUtils.Helpers.UnixTimestampToUtc(System.Int64)">
	<summary>
 Konvertiert den angegebenen Unix-Timestamp (Sekunden seit 1. Jänner 1970, 00:00 Uhr) in ein <see cref="T:System.DateTime"/>-Objekt unter der Verwendung von UTC.
 </summary>
	<param name="SecondsSinceEpocheBegin">Der Timestamp.</param>
</member><member name="M:OnUtils.Helpers.ShowThreadExceptionDialog(System.Exception)">
	<summary>
 Zeigt einen .Net-Fehlerdialog für unbehandelte Exceptions an.
 Der Rückgabewert gibt an, ob die Anwendung weiter ausgeführt oder beendet werden soll.
 </summary>
	<param name="Exception">Die Exception, deren Informationen angezeigt werden.</param>
</member><member name="F:OnUtils.Helpers.ThreadExceptionDialogResult.Continue">
	<summary>
 Die Exception soll ignoriert werden und die Anwendung soll weiterlaufen.
 </summary>
</member><member name="F:OnUtils.Helpers.ThreadExceptionDialogResult.ExitApplication">
	<summary>
 Die Anwendung soll vollständig beendet werden.
 </summary>
</member><member name="T:OnUtils.Helpers.ThreadExceptionDialogResult">
	<summary>
 Wird von der <see cref="M:OnUtils.Helpers.ShowThreadExceptionDialog(System.Exception)"/>-Funktion zurückgegeben.
 Die Enumerationswerte repräsentieren die Bedeutung der von der <see cref="M:System.Windows.Forms.Form.ShowDialog"/>-Funktion zurückgegebenen Werte der <see cref="T:System.Windows.Forms.DialogResult"/>-Enumeration.
 </summary>
</member><member name="T:OnUtils.Helpers">
	<summary>
 Beinhaltet Hilfsfunktionen, die keine Extensions sind.
 </summary>
</member><member name="P:OnUtils.Results.ErroredResult`1.Error">
	<summary>
 Der Fehler im Vorgang.
 </summary>
</member><member name="M:OnUtils.Results.ErroredResult`1.#ctor">
	<summary>
 Der Vorgang wurde erfolgreich abgeschlossen. Es wurde kein Wert zurückgegeben.
 </summary>
</member><member name="M:OnUtils.Results.ErroredResult`1.#ctor(`0)">
	<summary>
 Der Vorgang wurde nicht erfolgreich abgeschlossen. <paramref name="NewError"/> ist der Fehler im Vorgang.
 </summary>
</member><member name="T:OnUtils.Results.ErroredResult`1">
	<summary>
 Kapselt eine Angabe über den Erfolg eines Vorganges und einen Fehler, wenn der Vorgang nicht erfolgreich abgeschlossen wurde.
 </summary>
	<typeparam name="TError">Der Typ des Fehlers.</typeparam>
</member><member name="P:OnUtils.Wpf.ViewModelBase`1.Target">
	<summary>
 Das Objekt, dem dieses ViesModel zugeordnet ist.
 </summary>
</member><member name="M:OnUtils.Wpf.ViewModelBase`1.#ctor">
	<summary>
 Konstruktor. <see cref="P:OnUtils.Wpf.ViewModelBase`1.Target"/> wird auf Nothing festgelegt.
 </summary>
</member><member name="M:OnUtils.Wpf.ViewModelBase`1.#ctor(`0)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewTarget">Das Objekt, dem dieses ViewModel zugeordnet ist. Siehe <see cref="P:OnUtils.Wpf.ViewModelBase`1.Target"/>.</param>
</member><member name="M:OnUtils.Wpf.ViewModelBase`1.#ctor(System.Boolean,`0)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewEnableRecursiveOnPropertyChanged">Siehe <see cref="P:OnUtils.Wpf.ViewModelBase.EnableRecursiveOnPropertyChanged"/>.</param>
	<param name="NewTarget">Das Objekt, dem dieses ViewModel zugeordnet ist. Siehe <see cref="P:OnUtils.Wpf.ViewModelBase`1.Target"/>.</param>
</member><member name="T:OnUtils.Wpf.ViewModelBase`1">
	<summary>
 Stellt eine Basisklasse für ViewModels für WPF und MVVM dar.
 Dieses ViewModel ist einem Objekt zugeordnet, das es repräsentiert.
 </summary>
	<typeparam name="T">Der Typ des Objektes, dem das ViewModel zugeordnert ist.</typeparam>
</member><member name="M:OnUtils.Extensions.ConversionExtensions.AsT``1(System.Object)">
	<summary>
 Castet <paramref name="Target"/> zu <paramref name="T"/>. Entspricht <c>DirectCast(Target, T)</c> in VB bzw. <c>(T)Target</c> in C#.
 Achtung: Sollte nur in Situationen verwendet werden, in denen viele Verschachtelungen von DirectCast-Anweisungen die Lesbarkeit stak beeinträchtigen würden.
 Der Grund: Compiler prüfen üblicherweise, ob Casts überhaupt möglich sind und werfen dann Fehlermeldungen. Das passiert zum Beispiel, wenn die Klassen D1 und D2 von B erben und versucht wird, einen Ausdruck vom Typ D1 zu D2 zu casten. <c>DirectCast(New D1(), D2)</c> kann nie funktionieren und der Compiler merkt das an. <c>New D1().AsT(Of D2)()</c> kompiliert genauso wie <c>DirectCast(DirectCast(New D1(), Object), D2)</c> und löst zur Laufzeit eine InvalidCastException aus.
 Achtung: Unter Visual Basic funktioniert diese Extension nicht für Ausdrücke vom Typ Object.
 Details siehe http://www.vb-paradise.de/sonstiges/off-topic/p838773-was-die-welt-wirklich-nicht-braucht-fun-links-usw/#post838773
 </summary>
</member><member name="M:OnUtils.Extensions.ConversionExtensions.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Schränkt dieses Objekt auf seine Member als <see cref="T:System.Collections.Generic.IEnumerable`1"/> ein.
 Kann hilfreich sein, wenn eine Methode im Typ des Ausdrucks und eine Erweiterungsmethode für IEnumerable(Of T) den selben Namen haben und die Erweiterungsmethode aufgerufen werden soll.
 T kann in den meisten Fällen vom Compiler inferiert werden.
 </summary>
</member><member name="M:OnUtils.Extensions.ConversionExtensions.AsTypedEnumerable``1(System.Collections.IEnumerable)">
	<summary>
 Gibt ein generisches <see cref="T:System.Collections.Generic.IEnumerable`1"/>-Objekt zurück, das Elemente dieses nicht-generischen <see cref="T:System.Collections.IEnumerable"/> in den T-Typ castet.
 Gibt null zurück, wenn <paramref name="Target"/> null ist.
 Gibt <paramref name="Target"/> zurück, wenn es sich bereits um ein generisches <see cref="T:System.Collections.Generic.IEnumerable`1"/>-Objekt handelt.
 Eine <see cref="T:System.InvalidCastException"/> wird in <see cref="T:System.Collections.Generic.IEnumerator`1"/>.Current ausgelöst, wenn die Auflistung Objekte beinhaltet, die nicht zu T gecastet werden können.
 </summary>
</member><member name="M:OnUtils.Extensions.ConversionExtensions.ParseToEnum``1(System.String)">
	<summary>
 Konvertiert den String in einen Enumwert des angegebenen Types <paramref name="T"/>.
 </summary>
	<typeparam name="T">Der Enum-Typ, in den der String konvertiert wird.</typeparam>
	<exception cref="T:System.ArgumentException">T ist kein Enum-Typ.</exception>
	<exception cref="T:System.ArgumentException">Es gibt keinen passenden Wert im Enum.</exception>
</member><member name="M:OnUtils.Extensions.ConversionExtensions.TryParseToEnum``1(System.String,``0@)">
	<summary>
 Versucht, den String in einen Enumwert des angegebenen Types <paramref name="T"/> zu konvertieren.
 Gibt bei Erfolg True zurück, andernfalls False.
 </summary>
	<typeparam name="T">Der Enum-Typ, in den der String konvertiert wird.</typeparam>
	<param name="OutputValue">Eine Referenz auf ein Feld des Types <paramref name="T"/>, in dem das Ergebnis gespeichert wird.</param>
	<exception cref="T:System.ArgumentException">T ist kein Enum-Typ.</exception>
</member><member name="M:OnUtils.Extensions.ConversionExtensions.HByte(System.UInt16)">
	<summary>
 Gibt die höherwertigen 8 Bits des 16-Bit-Wertes zurück.
 </summary>
</member><member name="M:OnUtils.Extensions.ConversionExtensions.LByte(System.UInt16)">
	<summary>
 Gibt die niederwertigen 8 Bits des 16-Bit-Wertes zurück.
 </summary>
</member><member name="M:OnUtils.Extensions.ConversionExtensions.ToVisibility(System.Boolean)">
	<summary>
 Gibt <see cref="F:System.Windows.Visibility.Visible"/> zurück, wenn dieser Boolean True ist, andernfalls <see cref="F:System.Windows.Visibility.Collapsed"/>.
 </summary>
</member><member name="M:OnUtils.Extensions.ConversionExtensions.ToUnixTimestamp(System.DateTime)">
	<summary>
 Konvertiert dieses <see cref="T:System.DateTime"/>-Objekt in einen Unix-Timestamp. Es wird von UTC ausgegangen.
 Wenn die Zeit nicht in UTC angegeben ist, kann das Ergebnis vom erwarteten Wert abweichen. Verwenden Sie <see cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)"/>, um UTC für ein <see cref="T:System.DateTime"/>-Objekt anzugeben.
 </summary>
</member><member name="T:OnUtils.Extensions.ConversionExtensions">
	<summary>
 Beinhaltet erweiterungsmethoden für diverse Konvertierungen.
 </summary>
</member><member name="M:OnUtils.Extensions.IOExtensions.CopyTo(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
	<summary>
 Kopiert den Inhalt dieses Ordners in den in <paramref name="TargetDirectory"/> angegebenen Ordner.
 </summary>
	<param name="TargetDirectory">Der Ordner, in den der Inhalt dieses Ordners kopiert wird.</param>
</member><member name="M:OnUtils.Extensions.IOExtensions.CopyTo(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo})">
	<summary>
 Kopiert den Inhalt dieses Ordners in den in <paramref name="TargetDirectory"/> angegebenen Ordner.
 </summary>
	<param name="TargetDirectory">Der Ordner, in den der Inhalt dieses Ordners kopiert wird.</param>
</member><member name="M:OnUtils.Extensions.IOExtensions.SubDirectory(System.IO.DirectoryInfo,System.String)">
	<summary>
 Gibt ein <see cref="T:System.IO.DirectoryInfo"/> zurück, das ein Unterverzeichnis in diesem Verzeichnis repräsentiert.
 Der Pfad wird mit <see cref="M:System.IO.Path.Combine(System.String,System.String)"/> kombiniert.
 </summary>
	<param name="SubPath">Der Unterordner in diesem Ordner.</param>
</member><member name="M:OnUtils.Extensions.IOExtensions.SubFile(System.IO.DirectoryInfo,System.String)">
	<summary>
 Gibt ein <see cref="T:System.IO.FileInfo"/> zurück, das eine Datei in diesem Verzeichnis repräsentiert.
 Der Pfad wird mit <see cref="M:System.IO.Path.Combine(System.String,System.String)"/> kombiniert.
 </summary>
	<param name="SubPath">Der Pfad zur Datei diesem Ordner.</param>
</member><member name="T:OnUtils.Extensions.IOExtensions">
	<summary>
 Beinhaltet Erweiterungsmethoden für Typen im System.IO-Namespace.
 </summary>
</member><member name="M:OnUtils.Extensions.MouseEventArgsExtensions.WheelDirection(System.Windows.Forms.MouseEventArgs)">
	<summary>
 Ruft von einem <see cref="T:System.Windows.Forms.MouseEventArgs"/>-Objekt mithilfe der <see cref="P:System.Windows.Forms.MouseEventArgs.Delta"/>-Eigenschaft ab, in welche Richtung das Mausrad gedreht wurde.
 </summary>
</member><member name="M:OnUtils.Extensions.MouseEventArgsExtensions.WheelSteps(System.Windows.Forms.MouseEventArgs)">
	<summary>
 Ruft von einem <see cref="T:System.Windows.Forms.MouseEventArgs"/>-Objekt mithilfe der <see cref="P:System.Windows.Forms.MouseEventArgs.Delta"/>-Eigenschaft ab, um wie viele Schritte das Mausrad gedreht wurde.
 </summary>
</member><member name="F:OnUtils.Extensions.MouseEventArgsExtensions.MouseWheelDirection.None">
	<summary>
 Gibt an, dass das Mausrad nicht gedreht wurde.
 </summary>
</member><member name="F:OnUtils.Extensions.MouseEventArgsExtensions.MouseWheelDirection.Away">
	<summary>
 Gibt an, dass das Mausrad vom Benutzer weg gedreht wurde.
 Unter normalen Bedingungen bedeutet dies, dass in einem Dokument nach oben gescrollt wird.
 </summary>
</member><member name="F:OnUtils.Extensions.MouseEventArgsExtensions.MouseWheelDirection.Towards">
	<summary>
 Gibt an, dass das Mausrad zum Benutzer hin gedreht wurde.
 Unter normalen Bedingungen bedeutet dies, dass in einem Dokument nach unten gescrollt wird.
 </summary>
</member><member name="T:OnUtils.Extensions.MouseEventArgsExtensions.MouseWheelDirection">
	<summary>
 Eine Angabe über die Richtung, in die das Mausrad gedreht wurde.
 </summary>
</member><member name="T:OnUtils.Extensions.MouseEventArgsExtensions">
	<summary>
 Beinhaltet Erweiterungsmethoden für <see cref="T:System.Windows.Forms.MouseEventArgs"/>.
 </summary>
	<remarks></remarks>
</member><member name="E:OnUtils.TypedObservableCollection`1.ItemAdded">
	<summary>
 Wird ausgelöst, wenn ein Element hinzugefügt wurde.
 </summary>
</member><member name="M:OnUtils.TypedObservableCollection`1.OnItemAdded(`0,System.Int32)">
	<summary>
 Löst das <see cref="E:OnUtils.TypedObservableCollection`1.ItemAdded"/>-Event aus. Kann in abgeleiteten Klassen überschrieben werden, um auf das Event zu reagieren, ohne das Event direkt zu abonnieren.
 </summary>
	<param name="Item">Das hinzugefügte Element.</param>
</member><member name="E:OnUtils.TypedObservableCollection`1.ItemRemoved">
	<summary>
 Wird ausgelöst, wenn ein Element entfernt wurde.
 </summary>
</member><member name="M:OnUtils.TypedObservableCollection`1.OnItemRemoved(`0,System.Int32)">
	<summary>
 Löst das <see cref="E:OnUtils.TypedObservableCollection`1.ItemRemoved"/>-Event aus. Kann in abgeleiteten Klassen überschrieben werden, um auf das Event zu reagieren, ohne das Event direkt zu abonnieren.
 </summary>
	<param name="Item">Das entfernte Element.</param>
</member><member name="E:OnUtils.TypedObservableCollection`1.TypedCollectionChanged">
	<summary>
 Wird ausgelöst, sobald sich die Auflistung geändert hat.
 </summary>
</member><member name="M:OnUtils.TypedObservableCollection`1.OnTypedCollectionChanged">
	<summary>
 Löst das <see cref="E:OnUtils.TypedObservableCollection`1.TypedCollectionChanged"/>-Event aus. Kann in abgeleiteten Klassen überschrieben werden, um auf das Event zu reagieren, ohne das Event direkt zu abonnieren.
 </summary>
</member><member name="M:OnUtils.TypedObservableCollection`1.ClearItems">
	<summary>
 Erstellt eine Kopie aller Elemente in der Liste, entfernt alle Elemente und löst dann für jedes Element das <see cref="E:OnUtils.TypedObservableCollection`1.ItemRemoved"/>-Event aus.
 </summary>
</member><member name="M:OnUtils.TypedObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
	<summary>
		<see cref="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/>
	</summary>
</member><member name="T:OnUtils.TypedObservableCollection`1">
	<summary>
 Eine erweiterte <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>, die stark typisierte Events zur Verfügung stellt, die ausgelöst werden, wenn Elemente hinzugefügt und entfernt werden.
 </summary>
</member><member name="M:OnUtils.WinApi.LogicStringCompare.CompareLogical(System.String,System.String)">
	<summary>
 Vergleicht zwei Strings "logisch". Ziffernfolgen werden als Zahlen interpretiert und nach deren Wert sortiert.
 Gibt 0 zurück, wenn beide Strings als gleich zu betrachten sind. Gibt 1 zurück, wenn <paramref name="Left"/> nach <paramref name="Right"/> einsortiert werden soll bzw. -1 wenn nachher.
 Beispiel: {"10", "9", "11"}
 Alphanumerische Sortierung würde {"10", "11", "9"} ergeben, "logische" Sortierung ergibt {"9", "10", "11"}.
 </summary>
</member><member name="P:OnUtils.Wpf.SourceItemReplacedEventArgs`1.Index">
	<summary>
 Der Index des ersetzten Elements.
 </summary>
</member><member name="P:OnUtils.Wpf.SourceItemReplacedEventArgs`1.NewItem">
	<summary>
 Das neue Element
 </summary>
</member><member name="M:OnUtils.Wpf.SourceItemReplacedEventArgs`1.#ctor(System.Int32,`0)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewIndex"><see cref="P:OnUtils.Wpf.SourceItemReplacedEventArgs`1.Index"/></param>
	<param name="NewNewItem"><see cref="P:OnUtils.Wpf.SourceItemReplacedEventArgs`1.NewItem"/></param>
</member><member name="T:OnUtils.Wpf.SourceItemReplacedEventArgs`1">
	<summary>
 Wird von <see cref="T:OnUtils.Wpf.IViewModelCollectionSource`1"/> ausgelöst, wenn ein Element in der Datenquelle durch ein anderes ersetzt wurde.
 </summary>
</member><member name="P:OnUtils.Wpf.InvalidToolTipException.InvalidObject">
	<summary>
 Der Typ des Objektes, das ungültigerweise als ToolTip festgelegt ist.
 </summary>
</member><member name="T:OnUtils.Wpf.InvalidToolTipException">
	<summary>
 Wird ausgelöst, wenn der ToolTip eines <see cref="T:OnUtils.Wpf.ToolTipButton"/> nicht auf ein Objekt des Typs <see cref="T:System.Windows.Controls.ToolTip"/> festgelegt ist.
 </summary>
</member><member name="F:OnUtils.Wpf.Converters.ByteCountToStringConverter.ScaleNamingConvention.Decimal">
	<summary>
 Es wird die dezimale Skala verwendet (z.B. KB, MB, GB).
 1 MB = 1000 KB.
 </summary>
</member><member name="F:OnUtils.Wpf.Converters.ByteCountToStringConverter.ScaleNamingConvention.Binary">
	<summary>
 Es wird die binäre Skala verwendet (z.B. KiB, MiB, GiB).
 1 MiB = 1024 KiB.
 </summary>
</member><member name="T:OnUtils.Wpf.Converters.ByteCountToStringConverter.ScaleNamingConvention">
	<summary>
 Eine Angabe über die Einheiten, die verwendet werden.
 </summary>
</member><member name="P:OnUtils.Wpf.Converters.ByteCountToStringConverter.NamingConvention">
	<summary>
 Gibt an, welche Skala zur Anzeige verwendet wird.
 </summary>
</member><member name="T:OnUtils.Wpf.Converters.ByteCountToStringConverter">
	<summary>
 Konvertiert einen numerischen Typen wie z.B. <see cref="T:System.Byte"/> oder <see cref="T:System.Int32"/> in einen String. Dezimaltypen wie <see cref="T:System.Double"/> werden gerundet. Es werden nur Zahlen von 0 bis 1023 mit einer Einheit bis Yotta/Yobi zurückgegeben.
 Beispiel: 123456789 (Bytes) -&gt; "117 MiB"
 Der maximal zulässige Absolutwert ist <see cref="F:System.UInt64.MaxValue"/>.
 </summary>
</member><member name="M:OnUtils.DisplayItem.Create``1(System.String,``0)">
	<summary>
 Erstellt ein <see cref="T:OnUtils.DisplayItem`1"/>.
 </summary>
</member><member name="T:OnUtils.DisplayItem">
	<summary>
 Hilfsklasse zum Erstellen von <see cref="T:OnUtils.DisplayItem`1"/>.
 </summary>
</member><member name="P:OnUtils.DisplayItem`1.DisplayText">
	<summary>
 Der angezeigte Text.
 </summary>
</member><member name="P:OnUtils.DisplayItem`1.Value">
	<summary>
 Der gekapselte Wert.
 </summary>
</member><member name="M:OnUtils.DisplayItem`1.ToString">
	<summary>
 Gibt den Inhalt der <see cref="P:OnUtils.DisplayItem`1.DisplayText"/>-Property zurück.
 </summary>
</member><member name="T:OnUtils.DisplayItem`1">
	<summary>
 Kapselt einen Wert und verknüpft ihn mit einem Text, der dargestellt wird.
 </summary>
	<typeparam name="T">Der Typ des gekapselten Wertes.</typeparam>
</member><member name="M:OnUtils.Extensions.Extensions.NullableEquals``1(System.Nullable{``0},System.Nullable{``0})">
	<summary>
 Vergleicht dieses Nullable-Objekt mit einem anderen Nullable-Objekt und gibt True zurück, wenn sie die gleichen Eigenschaften besitzen.
 Das heißt konkret: HasValue müssen gleich sein und, wenn true, Value ebenfalls (Object.Equals).
 </summary>
	<param name="Other">Das Nullable-Objekt, mit dem dieses Nullable-Objekt verglichen wird.</param>
</member><member name="M:OnUtils.Extensions.Extensions.NextBoolean(System.Random,System.Double)">
	<summary>
 Gibt mit der in <paramref name="Probability"/> angegebenen Wahrscheinlichkeit True zurück. Andernfalls False.
 </summary>
	<param name="Probability">Gibt an, wie wahrscheinlich True zurückgegeben wird. Muss zwischen 0 und 1 liegen (inklusive). 0 bedeutet, dass nie True zurückgegeben wird, 1 bedeutet, dass immer True zurückgegeben wird.</param>
</member><member name="M:OnUtils.Extensions.Extensions.ButAlso``1(``0,System.Action{``0})">
	<summary>
 Gibt dieses Objekt zurück, ruft aber vorer auch die angegebene Funktion mit diesem Objekt auf.
 Kann verwendet werden, um z.B. in LINQ-Queries oder verschachtelten Objektinitialisierern Methoden an Objekten aufzurufen, die nichts zurückgeben.
 </summary>
	<param name="DoIt">Die Methode, die zusätzlich ausgeführt wird.</param>
</member><member name="M:OnUtils.Extensions.Extensions.RunDefaultConstructor``1(System.Type)">
	<summary>
 Ruft den Standard-Konstruktor für diesen Typ auf und gibt das erstellte Objekt als T zurück.
 </summary>
	<typeparam name="T">Der Typ des Objektes.</typeparam>
	<exception cref="T:System.ArgumentException">Dieser Typ ist kein T.</exception>
</member><member name="M:OnUtils.Extensions.Extensions.NextByte(System.Random)">
	<summary>
 Gibt einen zufälligen Wert zwischen 0 und 255 als Byte zurück.
 </summary>
</member><member name="T:OnUtils.Extensions.Extensions">
	<summary>
 Beinhaltet Erweiterungsmethoden für diverse Typen.
 </summary>
</member><member name="F:OnUtils.Forms.Hotkey.Wm_HotKey">
	<summary>
 Die Windows-Message für HotKeys.
 </summary>
</member><member name="E:OnUtils.Forms.Hotkey.KeyCodeChanged">
	<summary>
 Wird ausgelöst, wenn sich der Wert der <see cref="P:OnUtils.Forms.Hotkey.KeyCode"/>-Eigenschaft ändert.
 </summary>
</member><member name="E:OnUtils.Forms.Hotkey.HotKeyPressed">
	<summary>
 Wird ausgelöst, wenn die Tastenkombination gedrückt wurde.
 </summary>
</member><member name="P:OnUtils.Forms.Hotkey.KeyCode">
	<summary>
 Die Tastenkombination, auf die reagiert werden soll. Wird <see cref="F:System.Windows.Forms.Keys.None"/> angegeben, wird auf keine Tastenkombination reagiert.
 </summary>
</member><member name="T:OnUtils.Forms.Hotkey">
	<summary>
 Eine abgeänderte Form der HotKey-Klasse von ErfinderDesRades (siehe http://www.vb-paradise.de/allgemeines/sourcecode-austausch/57004-registerhotkey-wrapper/).
 </summary>
</member><member name="P:OnUtils.CommonData.PointD.X">
	<summary>
 Die X-Koordinate des Punktes.
 </summary>
</member><member name="P:OnUtils.CommonData.PointD.Y">
	<summary>
 Die Y-Koordinate des Punktes.
 </summary>
</member><member name="P:OnUtils.CommonData.PointD.IsEmpty">
	<summary>
 Gibt an, ob der Punkt auf 0 liegt.
 </summary>
</member><member name="M:OnUtils.CommonData.PointD.ToFormsPoint">
	<summary>
 Gibt einen <see cref="T:System.Drawing.Point"/> zur Verwendung in Windows Forms zurück.
 </summary>
</member><member name="M:OnUtils.CommonData.PointD.ToFormsPointF">
	<summary>
 Gibt einen <see cref="T:System.Drawing.PointF"/> zur Verwendung in Windows Forms zurück.
 </summary>
</member><member name="M:OnUtils.CommonData.PointD.ToWpfPoint">
	<summary>
 Gibt einen <see cref="T:System.Windows.Point"/> zur Verwendung in WPF zurück.
 </summary>
</member><member name="M:OnUtils.CommonData.PointD.op_Implicit(System.Drawing.Point)~OnUtils.CommonData.PointD">
	<summary>
 Erlaubt implizite Konvertierung von <see cref="T:System.Drawing.Point"/>.
 </summary>
</member><member name="M:OnUtils.CommonData.PointD.op_Implicit(System.Drawing.PointF)~OnUtils.CommonData.PointD">
	<summary>
 Erlaubt implizite Konvertierung von <see cref="T:System.Drawing.PointF"/>.
 </summary>
</member><member name="M:OnUtils.CommonData.PointD.op_Implicit(System.Windows.Point)~OnUtils.CommonData.PointD">
	<summary>
 Erlaubt implizite Konvertierung von <see cref="T:System.Windows.Point"/>.
 </summary>
</member><member name="T:OnUtils.CommonData.PointD">
	<summary>
 Speichert einen Satz von zwei Gleitkommazahlen doppelter Genauigkeit, die die Position eines Punktes angeben.
 </summary>
</member><member name="P:OnUtils.Streams.IndentStringBuilder.IndentLevel">
	<summary>
 Die aktuelle Einrückungstiefe.
 <see cref="P:OnUtils.Streams.IndentStringBuilder.IndentLevel"/> multipliziert mit <see cref="P:OnUtils.Streams.IndentStringBuilder.IndentationsPerLevel"/> ergibt die Anzahl an Zeichen, mit denen eingerückt wird.
 </summary>
</member><member name="P:OnUtils.Streams.IndentStringBuilder.IndentationsPerLevel">
	<summary>
 Gibt an, wie viele Zeichen pro Einrückung verwendet werden.
 Standardwert: 4
 </summary>
</member><member name="P:OnUtils.Streams.IndentStringBuilder.IndentChar">
	<summary>
 Das Zeichen, das zum Einrücken verwendet wird.
 Standardwert: Leerzeichen
 </summary>
</member><member name="P:OnUtils.Streams.IndentStringBuilder.Length">
	<summary>
 Gibt die Länge des bisher gepufferten Strings zurück.
 </summary>
</member><member name="P:OnUtils.Streams.IndentStringBuilder.Chars(System.Int32)">
	<summary>
 Ruft das Zeichen an der angegebenen Position ab oder legt es fest.
 <see cref="P:System.Text.StringBuilder.Chars(System.Int32)"/>
	</summary>
</member><member name="M:OnUtils.Streams.IndentStringBuilder.Indent">
	<summary>
 Erhöht die Einrückung (<see cref="P:OnUtils.Streams.IndentStringBuilder.IndentLevel"/>) um 1.
 </summary>
</member><member name="M:OnUtils.Streams.IndentStringBuilder.UnIndent">
	<summary>
 Verringert die Einrückung (<see cref="P:OnUtils.Streams.IndentStringBuilder.IndentLevel"/>) um 1.
 </summary>
	<exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:OnUtils.Streams.IndentStringBuilder.IndentLevel"/> ist bereits 0.</exception>
</member><member name="M:OnUtils.Streams.IndentStringBuilder.AppendIndentation">
	<summary>
 Hängt nur den Einrückungs-String an.
 </summary>
</member><member name="M:OnUtils.Streams.IndentStringBuilder.Append(System.String)">
	<summary>
 Hängt <paramref name="Value"/> ohne Einrückung und ohne Zeilenumbruch an.
 </summary>
	<param name="Value">Der anzuhängende String.</param>
</member><member name="M:OnUtils.Streams.IndentStringBuilder.Append(System.String,System.Object[])">
	<summary>
 Hängt <paramref name="Value"/> ohne Einrückung und ohne Zeilenumbruch an.
 Verwendet <see cref="T:System.String"/> um <paramref name="Value"/> zu formatieren.
 </summary>
	<param name="Value">Der anzuhängende String.</param>
	<param name="Args">Die Formatierungsargumente für <see cref="T:System.String"/>.</param>
</member><member name="M:OnUtils.Streams.IndentStringBuilder.AppendLine">
	<summary>
 Hängt einen Zeilenumbruch an.
 </summary>
</member><member name="M:OnUtils.Streams.IndentStringBuilder.AppendLine(System.String)">
	<summary>
 Hängt den Einrückungs-String, <paramref name="Value"/> und einen Zeilenumbruch an.
 </summary>
	<param name="Value">Der anzuhängende String.</param>
</member><member name="M:OnUtils.Streams.IndentStringBuilder.AppendLine(System.String,System.Object[])">
	<summary>
 Hängt den Einrückungs-String, <paramref name="Value"/> und einen Zeilenumbruch an.
 Verwendet <see cref="T:System.String"/> um <paramref name="Value"/> zu formatieren.
 </summary>
	<param name="Value">Der anzuhängende String.</param>
	<param name="Args">Die Formatierungsargumente für <see cref="T:System.String"/>.</param>
</member><member name="M:OnUtils.Streams.IndentStringBuilder.ToString">
	<summary>
 Gibt den Inhalt des StringBuilders zurück.
 </summary>
</member><member name="T:OnUtils.Streams.IndentStringBuilder">
	<summary>
 Kapselt einen <see cref="T:System.Text.StringBuilder"/> und bietet Methoden zum Einrücken von Zeilen.
 </summary>
</member><member name="P:OnUtils.WinApi.Native.Margins.Left">
	<summary>
 Die Breite des linken Randes.
 </summary>
</member><member name="P:OnUtils.WinApi.Native.Margins.Right">
	<summary>
 Die Breite des rechten Randes.
 </summary>
</member><member name="P:OnUtils.WinApi.Native.Margins.Top">
	<summary>
 Die Breite des oberen Randes.
 </summary>
</member><member name="P:OnUtils.WinApi.Native.Margins.Bottom">
	<summary>
 Die Breite des unteren Randes.
 </summary>
</member><member name="M:OnUtils.WinApi.Native.Margins.#ctor(System.Int32)">
	<summary>
 Setzt alle Rahmenbreiten auf den angegebenen Wert.
 </summary>
	<param name="All">Setzt alle Rahmenbreiten auf diesen Wert.</param>
</member><member name="M:OnUtils.WinApi.Native.Margins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewLeft">Siehe <see cref="P:OnUtils.WinApi.Native.Margins.Left"/>.</param>
	<param name="NewRight">Siehe <see cref="P:OnUtils.WinApi.Native.Margins.Right"/>.</param>
	<param name="NewTop">Siehe <see cref="P:OnUtils.WinApi.Native.Margins.Top"/>.</param>
	<param name="NewBottom">Siehe <see cref="P:OnUtils.WinApi.Native.Margins.Bottom"/>.</param>
</member><member name="T:OnUtils.WinApi.Native.Margins">
	<summary>
 Beinhaltet die Breiten eines Fensterrahmens.
 </summary>
</member><member name="M:OnUtils.DelegateEnumerator`1.#ctor(System.Func{`0},System.Func{System.Boolean})">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewCurrentCallback">Wird ausgeführt, wenn die Current-Eigenschaft des IEnumerators aufgerufen wird.</param>
	<param name="NewMoveNextCallback">Wird ausgeführt, wenn die MoveNext-Funktion des IEnumerators aufgerufen wird.</param>
</member><member name="M:OnUtils.DelegateEnumerator`1.#ctor(System.Func{`0},System.Func{System.Boolean},System.Action)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewCurrentCallback">Wird ausgeführt, wenn die Current-Eigenschaft des IEnumerators aufgerufen wird.</param>
	<param name="NewMoveNextCallback">Wird ausgeführt, wenn die MoveNext-Funktion des IEnumerators aufgerufen wird.</param>
	<param name="NewDisposeCallback">Wird ausgeführt, wenn die Dispose-Methode des IEnumerators aufgerufen wird, oder null, um keine Aktion durchzuführen.</param>
</member><member name="T:OnUtils.DelegateEnumerator`1">
	<summary>
 Implementiert <see cref="T:System.Collections.Generic.IEnumerator`1"/> und ruft Callbacks für MoveNext und Current.
 </summary>
</member><member name="M:OnUtils.Extensions.StreamExtensions.Write(System.IO.Stream,System.Byte)">
	<summary>
 Schreibt das angegebenen Byte in den Stream.
 </summary>
	<param name="Value">Das Byte, das in den Stream geschrieben wird.</param>
</member><member name="M:OnUtils.Extensions.StreamExtensions.Write(System.IO.Stream,System.Byte[])">
	<summary>
 Schreibt alle Bytes des angegebenen Arrays in den Stream.
 </summary>
	<param name="Bytes">Die Bytes, die in den Stream geschrieben werden.</param>
	<exception cref="T:System.ArgumentException"><paramref name="Bytes"/> ist Nothing oder enthält keine Elemente.</exception>
</member><member name="M:OnUtils.Extensions.StreamExtensions.Read(System.IO.Stream)">
	<summary>
 Liest ein einzelnes Byte aus dem Stream und es zurück.
 </summary>
	<exception cref="T:OnUtils.Streams.EndOfStreamException">Es konnte kein Byte aus dem Stream gelesen werden.</exception>
</member><member name="M:OnUtils.Extensions.StreamExtensions.Read(System.IO.Stream,System.Int32)">
	<summary>
 Liest <paramref name="ByteCount"/> Bytes aus dem Stream und gibt ein Array zurück, das genau diese Bytes beinhaltet.
 </summary>
	<param name="ByteCount">Die Anzahl an Bytes, die aus dem Stream gelesen werden soll.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ByteCount"/> ist 0 oder negativ.</exception>
	<exception cref="T:OnUtils.Streams.EndOfStreamException">Es wurden weniger Bytes gelesen, als von <paramref name="ByteCount"/> angegeben.</exception>
</member><member name="T:OnUtils.Extensions.StreamExtensions">
	<summary>
 Enthält Erweiterungsmethoden für <see cref="T:System.IO.Stream"/>.
 </summary>
</member><member name="P:OnUtils.Wpf.Converters.BooleanOperatorConverter.Operator">
	<summary>
 Gibt den Operator an, mit dem die Boolean-Werte verknüpft werden.
 </summary>
</member><member name="T:OnUtils.Wpf.Converters.BooleanOperatorConverter">
	<summary>
 Verknüpft mehrere Boolean-Werte mit dem angegebenen Operator.
 Werte, die nicht zu Boolean gecastet werden können, werden ignoriert.
 </summary>
</member><member name="P:OnUtils.Wpf.Converters.BooleanToStringConverter.TrueString">
	<summary>
 Der String, der verwendet wird, wenn der Boolean True ist.
 </summary>
</member><member name="P:OnUtils.Wpf.Converters.BooleanToStringConverter.FalseString">
	<summary>
 Der String, der verwendet wird, wenn der Boolean False ist.
 </summary>
</member><member name="T:OnUtils.Wpf.Converters.BooleanToStringConverter">
	<summary>
 Konvertiert zu <see cref="P:OnUtils.Wpf.Converters.BooleanToStringConverter.TrueString"/>, wenn der Boolean True ist, andernfalls zu <see cref="P:OnUtils.Wpf.Converters.BooleanToStringConverter.FalseString"/>.
 Zurückkonvertieren ist ebenfalls möglich.
 </summary>
</member><member name="T:OnUtils.WinApi.HotKeys">
	<summary>
 Beinhaltet WinApi-Aufrufe, die mit HotKeys zu tun haben.
 </summary>
</member><member name="P:OnUtils.Results.IValuedResult`1.Value">
	<summary>
 Der vom Vorgang zurückgegebene Wert.
 </summary>
</member><member name="T:OnUtils.Results.IValuedResult`1">
	<summary>
 Beschreibt ein Ergebnis, welches einen Wert eines Vorgangs zurückgibt.
 </summary>
	<typeparam name="TValue">Der Typ des Wertes</typeparam>
</member><member name="P:OnUtils.Results.ValuedErroredResult`2.Value">
	<summary>
 Der vom Vorgang zurückgegebene Wert.
 </summary>
</member><member name="P:OnUtils.Results.ValuedErroredResult`2.Error">
	<summary>
 Der Fehler im Vorgang.
 </summary>
</member><member name="M:OnUtils.Results.ValuedErroredResult`2.#ctor(`0)">
	<summary>
 Der Vorgang wurde erfolgreich abgeschlossen; <paramref name="NewValue"/> wurde zurückgegeben.
 </summary>
</member><member name="M:OnUtils.Results.ValuedErroredResult`2.#ctor(`1)">
	<summary>
 Der Vorgang wurde nicht erfolgreich abgeschlossen; <paramref name="NewError"/> ist der Fehler.
 </summary>
</member><member name="M:OnUtils.Results.ValuedErroredResult`2.#ctor(System.Object,System.Boolean)">
	<summary>
 Wird verwendet wenn die Konstruktoren, die <see cref="TValue"/> und <see cref="TError"/> verwenden nicht eindeutig genug sind.
 </summary>
	<param name="Undefined">Gibt den Wert oder Fehler an.</param>
	<param name="Success">True, wenn der Vorgang erfolgreich abgeschlossen wurde, andernfalls False.</param>
</member><member name="T:OnUtils.Results.ValuedErroredResult`2">
	<summary>
 Kapselt eine Angabe über den Erfolg eines Vorgangs, einen Wert, wenn der Vorgang erfolgreich abgeschlossen wurde und einen Fehler, wenn der Vorgang nicht erfolgreich abgeschlossen wurde.
 </summary>
	<typeparam name="TValue">Der Typ des Wertes.</typeparam>
	<typeparam name="TError">Der Typ des Fehlers.</typeparam>
</member><member name="M:OnUtils.Helpers.DebugPrint(System.String)">
	<summary>
 Ruft <see cref="M:System.Diagnostics.Debug.Print(System.String)"/> auf, auch in Release-Builds.
 </summary>
</member><member name="M:OnUtils.Helpers.DebugPrint(System.String,System.Object[])">
	<summary>
 Ruft <see cref="M:System.Diagnostics.Debug.Print(System.String)"/> auf, auch in Release-Builds.
 </summary>
</member><member name="P:OnUtils.Emit.Macros.EmitEvent.EventMember">
	<summary>
 Die <see cref="T:System.Reflection.Emit.EventBuilder"/>-Instanz.
 </summary>
</member><member name="P:OnUtils.Emit.Macros.EmitEvent.EventField">
	<summary>
 Das <see cref="T:System.Reflection.Emit.FieldBuilder"/>-Feld, das das Delegat-Objekt für das Event beinhaltet.
 </summary>
</member><member name="P:OnUtils.Emit.Macros.EmitEvent.AddHandlerMethod">
	<summary>
 Die AddHandler-Methode für das Event.
 </summary>
</member><member name="P:OnUtils.Emit.Macros.EmitEvent.RemoveHandlerMethod">
	<summary>
 Die RemoveHandler-Methode für das Event.
 </summary>
</member><member name="M:OnUtils.Emit.Macros.EmitEvent.#ctor(System.Reflection.Emit.EventBuilder,System.Reflection.Emit.FieldBuilder,System.Reflection.Emit.MethodBuilder,System.Reflection.Emit.MethodBuilder)">
	<summary>
 Konstruktor.
 </summary>
</member><member name="T:OnUtils.Emit.Macros.EmitEvent">
	<summary>
 Ein Event, das von der <see cref="M:OnUtils.Emit.Macros.Macros.EmitEvent(System.Reflection.Emit.TypeBuilder,OnUtils.Emit.AccessModifiers,System.Boolean,System.String,System.Type)"/>-Methode erstellt wurde.
 </summary>
</member><member name="M:OnUtils.WinApi.SetWindowPos.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
	<summary>
 Setzt ein Fenster, dem das in <paramref name="hWnd">hWnd</paramref> angegebene Handle gehört, auf eine in <paramref name="X">X</paramref> und <paramref name="Y">Y</paramref> angegebene Position und die in <paramref name="hWndInsertAfter">hWndInsertAfter</paramref> angegebene Ebene, unter Berücksichtigung der in <paramref name="uFlags">uFlags</paramref> angegebenen Bedingungen.
 </summary>
	<param name="hWnd">Das Handle des Fensters.</param>
	<param name="hWndInsertAfter">Die Angabe darüber, in welche Z-Ebene das Fenster verschoben werden soll.</param>
	<param name="X">Die X-Position des Fensters.</param>
	<param name="Y">Die Y-Position des Fensters.</param>
	<param name="cx">Die Breite des Fensters.</param>
	<param name="cy">Die Höhe des Fensters.</param>
	<param name="uFlags">Zusätzliche Parameter. Werden mit Or kombiniert.</param>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_AsyncWindowPos">
	<summary>
 If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request. 
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_DeferErase">
	<summary>
 Prevents generation of the Wm_SyncPaint message. 
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_DrawFrame">
	<summary>
 Draws a frame (defined in the window's class description) around the window.
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_FrameChanged">
	<summary>
 Applies new frame styles set using the SetWindowLong function. Sends a Wm_NCCalcSize message to the window, even if the window's size is not being changed. If this flag is not specified, Wm_NCCalcSize is sent only when the window's size is being changed.
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_HideWindow">
	<summary>
 Hides the window.
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_NoActivate">
	<summary>
 Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_NoCopyBits">
	<summary>
 Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_NoMove">
	<summary>
 Retains the current position (ignores X and Y parameters).
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_NoOwnerZOrder">
	<summary>
 Does not change the owner window's position in the Z order.
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_NoRedraw">
	<summary>
 Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_NoReposition">
	<summary>
 Same as the Swp_NoOwnerZOrder flag.
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_NoSendChanging">
	<summary>
 Prevents the window from receiving the Wm_WindowPosChanging message.
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_NoSize">
	<summary>
 Retains the current size (ignores the width and height parameters).
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_NoZOrder">
	<summary>
 Retains the current Z order (ignores the hWndInsertAfter parameter).
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.Flags.Swp_ShowWindow">
	<summary>
 Displays the window.
 </summary>
</member><member name="T:OnUtils.WinApi.SetWindowPos.Flags">
	<summary>
 Gibt Bedingungen für die SetWindowPos-Funktion an.
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.ZPosition.TotalBottom">
	<summary>
 Verschiebt das Fenster ganz nach hinten. Handelt es sich bei dem Fenster um ein TopMost-Fenster, wird TopMost auf False gesetzt.
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.ZPosition.BehindTopMost">
	<summary>
 Verschiebt das Fenster vor alle Nicht-TopMost-Fenster und hinter alle TopMost-Fenster.
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.ZPosition.TotalFront">
	<summary>
 Verschiebt das Fenster vor alle anderen Fenster. Wird ein anderes Fenster aktiviert, geht dieser Effekt verloren.
 </summary>
</member><member name="F:OnUtils.WinApi.SetWindowPos.ZPosition.TotalFrontFixed">
	<summary>
 Verschiebt das Fenster vor alle anderen Fenster und fixiert es in dieser Ebene. Wird ein anderes Fenster aktiviert, bleibt es im Fordergrund.
 </summary>
</member><member name="T:OnUtils.WinApi.SetWindowPos.ZPosition">
	<summary>
 Gibt an, in welche Z-Ebene das Fenster verschoben wird.
 </summary>
</member><member name="M:OnUtils.WinApi.SetWindowPos.SetWindowPos(System.IntPtr,OnUtils.WinApi.SetWindowPos.ZPosition,System.Int32,System.Int32,System.Int32,System.Int32,OnUtils.WinApi.SetWindowPos.Flags)">
	<summary>
 Setzt ein Fenster, dem das in <paramref name="hWnd">hWnd</paramref> angegebene Handle gehört, auf eine in <paramref name="X">X</paramref> und <paramref name="Y">Y</paramref> angegebene Position und die in <paramref name="hWndInsertAfter">hWndInsertAfter</paramref> angegebene Ebene, unter Berücksichtigung der in <paramref name="uFlags">uFlags</paramref> angegebenen Bedingungen.
 </summary>
	<param name="WindowHandle">Das Handle des Fensters.</param>
	<param name="ZPosition">Die Angabe darüber, in welche Z-Ebene das Fenster verschoben werden soll.</param>
	<param name="X">Die X-Position des Fensters.</param>
	<param name="Y">Die Y-Position des Fensters.</param>
	<param name="Width">Die Breite des Fensters.</param>
	<param name="Height">Die Höhe des Fensters.</param>
	<param name="Flags">Zusätzliche Parameter. Werden mit Or kombiniert.</param>
</member><member name="T:OnUtils.WinApi.SetWindowPos">
	<summary>
 Beinhaltet WinApi-Aufrufe, die mit der Funktion SetWindowPos() zu tun haben.
 </summary>
</member><member name="P:OnUtils.Results.ValuedResult`1.Value">
	<summary>
 Der vom Vorgang zurückgegebene Wert.
 </summary>
</member><member name="M:OnUtils.Results.ValuedResult`1.#ctor">
	<summary>
 Der Vorgang wurde nicht erfolgreich abgeschlossen. Es wurde kein Wert zurückgegeben.
 </summary>
</member><member name="M:OnUtils.Results.ValuedResult`1.#ctor(`0)">
	<summary>
 Der Vorgang wurde erfolgreich abgeschlossen. <paramref name="NewValue"/> ist der zurückgegebene Wert.
 </summary>
</member><member name="F:OnUtils.Results.ValuedResult`1.Fail">
	<summary>
 Ein Objekt, das einen nicht erfolgreich abgeschlossenen Vorgang repräsentiert.
 </summary>
</member><member name="T:OnUtils.Results.ValuedResult`1">
	<summary>
 Kapselt eine Angabe über den Erfolg eines Vorganges und einen Wert, wenn der Vorgang erfolgreich abgeschlossen wurde.
 </summary>
	<typeparam name="TValue">Der Typ des Wertes.</typeparam>
</member><member name="P:OnUtils.Wpf.ViewModelCollectionItemCreatingEventArgs`2.ViewModel">
	<summary>
 Weisen Sie dieser Property eine neue Instanz eines ViewModels für <see cref="P:OnUtils.ItemEventArgs`1.Item"/> zu.
 </summary>
</member><member name="M:OnUtils.Wpf.ViewModelCollectionItemCreatingEventArgs`2.#ctor(`0)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewItem">Siehe <see cref="P:OnUtils.ItemEventArgs`1.Item"/>.</param>
</member><member name="T:OnUtils.Wpf.ViewModelCollectionItemCreatingEventArgs`2">
	<summary>
 Enthält Informationen über das <see cref="E:OnUtils.Wpf.ViewModelCollection`2.ItemCreating"/>-Event.
 </summary>
	<typeparam name="TItem">Der Typ des hinzugefügten Objektes.</typeparam>
	<typeparam name="TViewModel">Der Typ des ViewModels, das dem hinzugefügten Objekt zugeordnet ist.</typeparam>
</member><member name="P:OnUtils.ItemEventArgs`1.Item">
	<summary>
 Das Element, für das das Event ausgelöst wurde.
 </summary>
</member><member name="M:OnUtils.ItemEventArgs`1.#ctor(`0)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewItem"><see cref="P:OnUtils.ItemEventArgs`1.Item"/></param>
</member><member name="T:OnUtils.ItemEventArgs`1">
	<summary>
 Enthält ein Element der Auflistung, die das Event ausgelöst hat.
 </summary>
</member><member name="P:OnUtils.LockBits.Bitmap">
	<summary>
 Die gesperrte Bitmap.
 </summary>
</member><member name="P:OnUtils.LockBits.Data">
	<summary>
 Das von <see cref="M:System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)"/> zurückgegebene <see cref="T:System.Drawing.Imaging.BitmapData"/>-Objekt.
 </summary>
</member><member name="P:OnUtils.LockBits.ByteCount">
	<summary>
 Gibt die Anzahl an Bytes an, die von LockBits gesperrt wurden. Entspricht Abs(<see cref="P:System.Drawing.Imaging.BitmapData.Stride"/>) * <see cref="P:System.Drawing.Imaging.BitmapData.Height"/>.
 </summary>
</member><member name="P:OnUtils.LockBits.Stride">
	<summary>
 Der Absolutwert von <see cref="P:OnUtils.LockBits.Data"/>.<see cref="P:System.Drawing.Imaging.BitmapData.Stride"/>.
 </summary>
</member><member name="P:OnUtils.LockBits.IsTopDownScan">
	<summary>
 Gibt an, ob die Bitmapdaten von oben nach unten im gesperrten Bereich vorliegen.
 Dies ist der Fall, wenn <see cref="P:OnUtils.LockBits.Data"/>.<see cref="P:System.Drawing.Imaging.BitmapData.Stride"/> positiv ist.
 </summary>
</member><member name="P:OnUtils.LockBits.BitsPerPixel">
	<summary>
 Gibt die Anzahl an Bits an, die von jedem Pixel belegt werden.
 </summary>
</member><member name="P:OnUtils.LockBits.BytesPerPixel">
	<summary>
 Gibt die Anzahl an Bytes an, die von jedem Pixel belegt werden.
 </summary>
</member><member name="M:OnUtils.LockBits.#ctor(System.Drawing.Bitmap,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)">
	<summary>
 Sperrt den gesamten Inhalt der angegebenen Bitmap.
 </summary>
	<param name="Bitmap"><see cref="P:OnUtils.LockBits.Bitmap"/></param>
	<param name="LockMode">siehe Parameter "flags" in <see cref="M:System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)"/> für Details.</param>
	<param name="Format">siehe Parameter "format" in <see cref="M:System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)"/> für Details.</param>
	<exception cref="T:System.ArgumentNullException">Bitmap ist null.</exception>
</member><member name="M:OnUtils.LockBits.#ctor(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)">
	<summary>
 Sperrt den angegebenen Bereich in der angegebenen Bitmap.
 </summary>
	<param name="Bitmap"><see cref="P:OnUtils.LockBits.Bitmap"/></param>
	<param name="LockedRectangle">Der zu sperrende Bereich (siehe Parameter "rect" in <see cref="M:System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)"/> für Details).</param>
	<param name="LockMode">siehe Parameter "flags" in <see cref="M:System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)"/> für Details.</param>
	<param name="Format">siehe Parameter "format" in <see cref="M:System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)"/> für Details.</param>
	<exception cref="T:System.ArgumentNullException">Bitmap ist null.</exception>
</member><member name="M:OnUtils.LockBits.CreateEmptyByteArray">
	<summary>
 Gibt ein uninitialisiertes Byte-Array mit der passenden Länge <see cref="P:OnUtils.LockBits.ByteCount"/> zurück, in das Daten geschrieben und das anschließend mit <see cref="M:OnUtils.LockBits.CopyFromByteArray(System.Byte[])"/> zurückkopiert werden kann.
 </summary>
</member><member name="M:OnUtils.LockBits.CreateEmptyInt32Array">
	<summary>
 Gibt ein uninitialisiertes Int32-Array mit der passenden Länge zurück, in das Daten geschrieben und das anschließend mit <see cref="M:OnUtils.LockBits.CopyFromInt32Array(System.Int32[])"/> zurückkopiert werden kann.
 Wenn <see cref="P:OnUtils.LockBits.ByteCount"/> nicht exakt durch 4 teilbar ist wird die Größe des Arrays um 1 erhöht, sodass das letzte Array-Element die restlichen Bytes beinhaltet.
 </summary>
</member><member name="M:OnUtils.LockBits.CopyToByteArray">
	<summary>
 Kopiert den gesperrten Bereich aus dem unverwalteten Speicher in ein verwaltetes Byte-Array mit der Länge <see cref="P:OnUtils.LockBits.ByteCount"/>.
 </summary>
</member><member name="M:OnUtils.LockBits.CopyToInt32Array">
	<summary>
 Kopiert den gesperrten Bereich aus dem unverwalteten Speicher in ein verwaltetes Int32-Array mit der Länge <see cref="M:System.Math.Ceiling(System.Decimal)"/>(<see cref="P:OnUtils.LockBits.ByteCount"/> / 4).
 </summary>
</member><member name="M:OnUtils.LockBits.CopyToByteArray(System.Byte[])">
	<summary>
 Kopiert den gesperrten Bereich aus dem unverwalteten Speicher in ein verwaltetes Byte-Array.
 Das Array muss mindestens <see cref="P:OnUtils.LockBits.ByteCount"/> Elemente beinhalten.
 </summary>
</member><member name="M:OnUtils.LockBits.CopyToInt32Array(System.Int32[])">
	<summary>
 Kopiert den gesperrten Bereich aus dem unverwalteten Speicher in ein verwaltetes Int32-Array.
 Das Array muss mindestens <see cref="M:System.Math.Ceiling(System.Decimal)"/>(<see cref="P:OnUtils.LockBits.ByteCount"/> / 4) Elemente beinhalten.
 </summary>
</member><member name="M:OnUtils.LockBits.CopyFromByteArray(System.Byte[])">
	<summary>
 Kopiert das angegebene Byte-Array in den gesperrten Bereich im unverwalteten Speicher. Die Länge des Arrays muss mindestens <see cref="P:OnUtils.LockBits.ByteCount"/> sein.
 </summary>
	<param name="Source">Die zu kopierenden Bytes.</param>
</member><member name="M:OnUtils.LockBits.CopyFromInt32Array(System.Int32[])">
	<summary>
 Kopiert das angegebene Byte-Array in den gesperrten Bereich im unverwalteten Speicher. Die Länge des Arrays muss mindestens <see cref="M:System.Math.Ceiling(System.Decimal)"/>(<see cref="P:OnUtils.LockBits.ByteCount"/> / 4) sein.
 </summary>
	<param name="Source">Die zu kopierenden Int32.</param>
</member><member name="T:OnUtils.LockBits">
	<summary>
 Verwendet <see cref="M:System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)"/>, um einen bereich der im Konstruktor angegebenen Bitmap zu sperren und entsperrt den Bereich wieder, sobald das Objekt verworfen wird.
 Für die Verwendung in einem Using-Block ausgelegt.
 </summary>
</member><member name="T:OnUtils.Wpf.Converters.EnumToUnderlyingTypeConverter">
	<summary>
 Konvertiert einen Enum-Wert zu seinem zugrundeliegenden Typ, der durch <see cref="M:System.Enum.GetUnderlyingType(System.Type)"/> angegeben ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Add(System.Reflection.Emit.ILGenerator)">
	<summary>
 Addiert zwei Werte und legt das Ergebnis auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Add_Ovf(System.Reflection.Emit.ILGenerator)">
	<summary>
 Addiert zwei ganze Zahlen, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Add_Ovf_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Addiert zwei Ganzzahlwerte ohne Vorzeichen, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.And(System.Reflection.Emit.ILGenerator)">
	<summary>
 Berechnet das bitweise AND für zwei Werte und legt das Ergebnis auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Arglist(System.Reflection.Emit.ILGenerator)">
	<summary>
 Gibt einen nicht verwalteten Zeiger auf die Argumentliste der aktuellen Methode zurück.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Box(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Konvertiert einen Werttyp in einen Objektverweis (Typ O).
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Br(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung bedingungslos an eine Zielanweisung.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Break(System.Reflection.Emit.ILGenerator)">
	<summary>
 Signalisiert CLI (Common Language Infrastructure), den Debugger darüber zu informieren, dass ein Haltepunkt erreicht wurde.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Brfalse(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung, wenn  entweder false, ein NULL-Verweis (Nothing in Visual Basic) oder 0 (null) ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Brtrue(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung, wenn  entweder true, nicht NULL oder ungleich 0 (null) ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Call(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
	<summary>
 Ruft die Methode auf, die der übergebene Methodendeskriptor angibt.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
	<summary>
 Ruft die Methode auf, die der übergebene Methodendeskriptor angibt.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Calli(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.SignatureHelper)">
	<summary>
 Ruft die angegebene Methode auf dem Auswertungsstapel (als Zeiger auf einen Einstiegspunkt) mit Argumenten auf, die durch eine Aufrufkonvention beschrieben sind.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ceq(System.Reflection.Emit.ILGenerator)">
	<summary>
 Vergleicht zwei Werte.Wenn sie gleich sind, wird der Ganzzahlwert 1 (int32) auf dem Auswertungsstapel abgelegt, andernfalls wird 0 (int32) auf dem Auswertungsstapel abgelegt.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Cgt(System.Reflection.Emit.ILGenerator)">
	<summary>
 Vergleicht zwei Werte.Wenn der erste Wert größer als der zweite Wert ist, wird der Ganzzahlwert 1 (int32) auf dem Auswertungsstapel abgelegt, andernfalls wird 0 (int32) auf dem Auswertungsstapel abgelegt.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Cgt_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Vergleicht zwei Werte ohne Vorzeichen oder zwei ungeordnete Werte.Wenn der erste Wert größer als der zweite Wert ist, wird der Ganzzahlwert 1 (int32) auf dem Auswertungsstapel abgelegt, andernfalls wird 0 (int32) auf dem Auswertungsstapel abgelegt.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ckfinite(System.Reflection.Emit.ILGenerator)">
	<summary>
 Löst  aus, wenn der Wert keine endliche Zahl ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Clt(System.Reflection.Emit.ILGenerator)">
	<summary>
 Vergleicht zwei Werte.Wenn der erste Wert kleiner als der zweite Wert ist, wird der Ganzzahlwert 1 (int32) auf dem Auswertungsstapel abgelegt, andernfalls wird 0 (int32) auf dem Auswertungsstapel abgelegt.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Clt_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Vergleicht die Werte ohne Vorzeichen oder die ungeordneten Werte  und .Wenn  kleiner als  ist, wird der Ganzzahlwert 1 (int32) auf dem Auswertungsstapel abgelegt, andernfalls wird 0 (int32) auf dem Auswertungsstapel abgelegt.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_I(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert an oberster Position des Auswertungsstapels in native int.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_I1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert an oberster Position des Auswertungsstapels in int8 und erweitert ihn dann zu int32 (durch Auffüllen).
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_I2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert an oberster Position des Auswertungsstapels in int16 und erweitert ihn dann zu int32 (durch Auffüllen).
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_I4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert an oberster Position des Auswertungsstapels in int32.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_I8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert an oberster Position des Auswertungsstapels in int64.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_I(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in native int mit Vorzeichen und löst bei einem Überlauf eine  aus.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_I_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in native int mit Vorzeichen und löst bei einem Überlauf eine  aus.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_I1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in int8 mit Vorzeichen und erweitert ihn auf int32. Bei einem Überlauf wird eine  ausgelöst.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_I1_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in int8 mit Vorzeichen und erweitert ihn auf int32. Bei einem Überlauf wird eine  ausgelöst.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_I2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in int16 mit Vorzeichen und erweitert ihn auf int32. Bei einem Überlauf wird eine  ausgelöst.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_I2_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in int16 mit Vorzeichen und erweitert ihn auf int32. Bei einem Überlauf wird eine  ausgelöst.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_I4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in int32 mit Vorzeichen und löst bei einem Überlauf eine  aus.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_I4_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in int32 mit Vorzeichen und löst bei einem Überlauf eine  aus.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_I8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in int64 mit Vorzeichen und löst bei einem Überlauf eine  aus.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_I8_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in int64 mit Vorzeichen und löst bei einem Überlauf eine  aus.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_U(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in unsigned native int und löst bei einem Überlauf eine  aus.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_U_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in unsigned native int und löst bei einem Überlauf eine  aus.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_U1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in unsigned int8 und erweitert ihn auf int32. Bei einem Überlauf wird eine  ausgelöst.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_U1_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in unsigned int8 und erweitert ihn auf int32. Bei einem Überlauf wird eine  ausgelöst.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_U2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in unsigned int16 und erweitert ihn auf int32. Bei einem Überlauf wird eine  ausgelöst.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_U2_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in unsigned int16 und erweitert ihn auf int32. Bei einem Überlauf wird eine  ausgelöst.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_U4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in unsigned int32 und löst bei einem Überlauf eine  aus.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_U4_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in unsigned int32 und löst bei einem Überlauf eine  aus.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_U8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in unsigned int64 und löst bei einem Überlauf eine  aus.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_Ovf_U8_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in unsigned int64 und löst bei einem Überlauf eine  aus.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_R_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Ganzzahlwert ohne Vorzeichen an oberster Position des Auswertungsstapels in float32.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_R4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert an oberster Position des Auswertungsstapels in float32.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_R8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert an oberster Position des Auswertungsstapels in float64.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_U(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert an oberster Position des Auswertungsstapels in unsigned native int und erweitert ihn dann zu native int.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_U1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert an oberster Position des Auswertungsstapels in unsigned int8 und erweitert ihn dann zu int32.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_U2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert an oberster Position des Auswertungsstapels in unsigned int16 und erweitert ihn dann zu int32.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_U4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert an oberster Position des Auswertungsstapels in unsigned int32 und erweitert ihn dann zu int32.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Conv_U8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Konvertiert den Wert an oberster Position des Auswertungsstapels in unsigned int64 und erweitert ihn dann zu int64.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Cpblk(System.Reflection.Emit.ILGenerator)">
	<summary>
 Kopiert eine angegebene Anzahl von Bytes von einer Quelladresse an eine Zieladresse.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Div(System.Reflection.Emit.ILGenerator)">
	<summary>
 Dividiert zwei Werte und legt das Ergebnis als Gleitkommawert (Typ F) oder Quotient (Typ int32) auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Div_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Dividiert zwei Ganzzahlwerte ohne Vorzeichen und legt das Ergebnis (int32) auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Dup(System.Reflection.Emit.ILGenerator)">
	<summary>
 Kopiert den obersten Wert auf dem Auswertungsstapel und legt die Kopie dann auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Endfilter(System.Reflection.Emit.ILGenerator)">
	<summary>
 Überträgt die Steuerung von der filter-Klausel einer Ausnahme zurück an den CLI-Ausnahmehandler (Common Language Infrastructure).
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Endfinally(System.Reflection.Emit.ILGenerator)">
	<summary>
 Überträgt die Steuerung aus der fault-Klausel oder finally-Klausel eines Ausnahmeblockes zurück an den CLI-Ausnahmehandler (Common Language Infrastructure).
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Initblk(System.Reflection.Emit.ILGenerator)">
	<summary>
 Initialisiert einen angegebenen Speicherblock an einer bestimmten Adresse mit einer angegebenen Größe und einem angegebenen Anfangswert.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Jmp(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
	<summary>
 Beendet die aktuelle Methode und wechselt zur angegebenen Methode.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldarg(System.Reflection.Emit.ILGenerator,System.Int16)">
	<summary>
 Lädt ein Argument, auf das ein angegebener Indexwert verweist, in den Stapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldarga(System.Reflection.Emit.ILGenerator,System.Int16)">
	<summary>
 Lädt eine Argumentadresse in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_I4(System.Reflection.Emit.ILGenerator,System.Int32)">
	<summary>
 Legt einen bereitgestellten Wert vom Typ int32 als int32 auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_I8(System.Reflection.Emit.ILGenerator,System.Int64)">
	<summary>
 Legt einen bereitgestellten Wert vom Typ int64 als int64 auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_R4(System.Reflection.Emit.ILGenerator,System.Single)">
	<summary>
 Legt einen bereitgestellten Wert vom Typ float32 als Typ F (Gleitkommawert) auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_R8(System.Reflection.Emit.ILGenerator,System.Double)">
	<summary>
 Legt einen bereitgestellten Wert vom Typ float64 als Typ F (Gleitkommawert) auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldftn(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
	<summary>
 Legt einen nicht verwalteten Zeiger (Typ native int) auf dem Auswertungsstapel ab. Dieser Zeiger zeigt auf den systemeigenen Code, der eine bestimmte Methode implementiert.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldind_I(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt einen Wert vom Typ native int indirekt als native int in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldind_I1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt einen Wert vom Typ int8 indirekt als int32 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldind_I2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt einen Wert vom Typ int16 indirekt als int32 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldind_I4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt einen Wert vom Typ int32 indirekt als int32 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldind_I8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt einen Wert vom Typ int64 indirekt als int64 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldind_R4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt einen Wert vom Typ float32 indirekt als Typ F (Gleitkommawert) in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldind_R8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt einen Wert vom Typ float64 indirekt als Typ F (Gleitkommawert) in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldind_Ref(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt einen Objektverweis indirekt als Typ O (Objektverweis) in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldind_U1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt einen Wert vom Typ unsigned int8 indirekt als int32 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldind_U2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt einen Wert vom Typ unsigned int16 indirekt als int32 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldind_U4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt einen Wert vom Typ unsigned int32 indirekt als int32 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldloc(System.Reflection.Emit.ILGenerator,System.Int16)">
	<summary>
 Lädt die lokale Variable an einem bestimmten Index in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldloc(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
	<summary>
 Lädt die lokale Variable an einem bestimmten Index in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldloca(System.Reflection.Emit.ILGenerator,System.Int16)">
	<summary>
 Lädt die Adresse der lokalen Variablen am angegebenen Index in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldloca(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
	<summary>
 Lädt die Adresse der lokalen Variablen am angegebenen Index in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldnull(System.Reflection.Emit.ILGenerator)">
	<summary>
 Legt einen NULL-Verweis (Typ O) auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldtoken(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
	<summary>
 Konvertiert ein Metadatentoken in seine Laufzeitdarstellung und legt es auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldtoken(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
	<summary>
 Konvertiert ein Metadatentoken in seine Laufzeitdarstellung und legt es auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldtoken(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Konvertiert ein Metadatentoken in seine Laufzeitdarstellung und legt es auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldvirtftn(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
	<summary>
 Legt einen nicht verwalteten Zeiger (Typ native int) auf systemeigenen Code auf dem Auswertungsstapel ab. Dieser Code implementiert eine bestimmte virtuelle Methode, die einem angegebenen Objekt zugeordnet ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Leave(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Beendet einen geschützten Codebereich, wobei die Steuerung bedingungslos an eine bestimmte Zielanweisung übertragen wird.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Leave_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Beendet einen geschützten Codebereich, wobei die Steuerung bedingungslos an eine bestimmte Zielanweisung übertragen wird, Kurzform.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Localloc(System.Reflection.Emit.ILGenerator)">
	<summary>
 Reserviert eine bestimmte Anzahl von Bytes aus dem lokalen dynamischen Speicherpool und legt die Adresse (einen flüchtigen Zeiger, Typ *) des ersten reservierten Bytes auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Mkrefany(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Legt einen typisierten Verweis auf eine Instanz eines bestimmten Typs auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Mul(System.Reflection.Emit.ILGenerator)">
	<summary>
 Multipliziert zwei Werte und legt das Ergebnis auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Mul_Ovf(System.Reflection.Emit.ILGenerator)">
	<summary>
 Multipliziert zwei Ganzzahlwerte, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Mul_Ovf_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Multipliziert zwei Ganzzahlwerte ohne Vorzeichen, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Neg(System.Reflection.Emit.ILGenerator)">
	<summary>
 Negiert einen Wert und legt das Ergebnis auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Nop(System.Reflection.Emit.ILGenerator)">
	<summary>
 Füllt Speicherplatz auf, wenn Opcodes gepatcht werden.Es wird keine sinnvolle Operation ausgeführt, obwohl ein Verarbeitungszyklus ausgeführt werden kann.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Not(System.Reflection.Emit.ILGenerator)">
	<summary>
 Berechnet das bitweise Komplement des Ganzzahlwerts an oberster Position des Stapels und legt das Ergebnis als denselben Typ auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Or(System.Reflection.Emit.ILGenerator)">
	<summary>
 Berechnet das bitweise Komplement der beiden Ganzzahlwerte an oberster Position des Stapels und legt das Ergebnis auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Pop(System.Reflection.Emit.ILGenerator)">
	<summary>
 Entfernt den Wert, der sich derzeit an oberster Position des Auswertungsstapels befindet.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Refanytype(System.Reflection.Emit.ILGenerator)">
	<summary>
 Ruft das Typtoken ab, das in einen typisierten Verweis eingebettet ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Refanyval(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Ruft die Adresse (Typ &amp;) ab, die in einen typisierten Verweis eingebettet ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Rem(System.Reflection.Emit.ILGenerator)">
	<summary>
 Dividiert zwei Werte und legt den Rest auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Rem_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Dividiert zwei Werte ohne Vorzeichen und legt den Rest auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ret(System.Reflection.Emit.ILGenerator)">
	<summary>
 Wird von der aktuellen Methode zurückgegeben und legt einen Rückgabewert (sofern vorhanden) vom Auswertungsstapel des Aufgerufenen auf dem Auswertungsstapel des Aufrufenden ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Shl(System.Reflection.Emit.ILGenerator)">
	<summary>
 Verschiebt einen ganzzahligen Wert um eine angegebene Anzahl von Bits nach links, wobei die frei werdenden Stellen mit 0-Bits aufgefüllt werden, und legt das Ergebnis auf den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Shr(System.Reflection.Emit.ILGenerator)">
	<summary>
 Verschiebt einen ganzzahligen Wert um eine angegebene Anzahl von Bits nach rechts, wobei das Vorzeichen mitgeführt wird, und legt das Ergebnis auf den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Shr_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Verschiebt einen ganzzahligen Wert ohne Vorzeichen um eine angegebene Anzahl von Bits nach rechts, wobei die frei werdenden Stellen mit 0-Bits aufgefüllt werden, und legt das Ergebnis auf den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Sizeof(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Legt die Größe eines bereitgestellten Werttyps in Bytes auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Starg(System.Reflection.Emit.ILGenerator,System.Int16)">
	<summary>
 Speichert den an der obersten Position des Auswertungsstapels befindlichen Wert im Argumentslot an einem angegebenen Index.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stind_I(System.Reflection.Emit.ILGenerator)">
	<summary>
 Speichert einen Wert vom Typ native int an einer angegebenen Adresse.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stind_I1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Speichert einen Wert vom Typ int8 an einer angegebenen Adresse.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stind_I2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Speichert einen Wert vom Typ int16 an einer angegebenen Adresse.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stind_I4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Speichert einen Wert vom Typ int32 an einer angegebenen Adresse.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stind_I8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Speichert einen Wert vom Typ int64 an einer angegebenen Adresse.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stind_R4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Speichert einen Wert vom Typ float32 an einer angegebenen Adresse.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stind_R8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Speichert einen Wert vom Typ float64 an einer angegebenen Adresse.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stind_Ref(System.Reflection.Emit.ILGenerator)">
	<summary>
 Speichert einen Objektverweiswert an einer angegebenen Adresse.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stloc(System.Reflection.Emit.ILGenerator,System.Int16)">
	<summary>
 Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am angegebenen Index.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stloc(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
	<summary>
 Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am angegebenen Index.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stobj(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Kopiert einen Wert mit dem angegebenen Typ vom Auswertungsstapel in die angegebene Speicheradresse.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Sub(System.Reflection.Emit.ILGenerator)">
	<summary>
 Subtrahiert einen Wert von einem anderen Wert und legt das Ergebnis auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Sub_Ovf(System.Reflection.Emit.ILGenerator)">
	<summary>
 Subtrahiert einen Ganzzahlwert von einem anderen Ganzzahlwert, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Sub_Ovf_Un(System.Reflection.Emit.ILGenerator)">
	<summary>
 Subtrahiert einen Ganzzahlwert ohne Vorzeichen von einem anderen Ganzzahlwert, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Switch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label[])">
	<summary>
 Implementiert eine Sprungtabelle.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Unbox(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Konvertiert die Darstellung eines mittels Boxing gepackten Werttyps in seine mittels Unboxing entpackte Entsprechung.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Xor(System.Reflection.Emit.ILGenerator)">
	<summary>
 Berechnet das bitweise XOR der beidem auf dem Stapel an oberster Position befindlichen Werte und legt das Ergebnis auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Beq(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung, wenn zwei Werte übereinstimmen.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Beq_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn zwei Werte übereinstimmen.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Bge(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung, wenn der erste Wert größer oder gleich dem zweiten Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Bge_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn der erste Wert größer oder gleich dem zweiten Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Bge_Un(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung, wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert größer als der zweite Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Bge_Un_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert größer als der zweite Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Bgt(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung, wenn der erste Wert größer als der zweite Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Bgt_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn der erste Wert größer als der zweite Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Bgt_Un(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung, wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert größer als der zweite Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Bgt_Un_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert größer als der zweite Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ble(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung, wenn der erste Wert kleiner oder gleich dem zweiten Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ble_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn der erste Wert kleiner oder gleich dem zweiten Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ble_Un(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung, wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert kleiner oder gleich dem zweiten Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ble_Un_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert kleiner oder gleich dem zweiten Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Blt(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung, wenn der erste Wert kleiner als der zweite Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Blt_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn der erste Wert kleiner als der zweite Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Blt_Un(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung, wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert kleiner als der zweite Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Blt_Un_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert kleiner als der zweite Wert ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Bne_Un(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung, wenn zwei Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte ungleich sind.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Bne_Un_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn zwei Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte ungleich sind.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Br_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung bedingungslos an eine Zielanweisung (Kurzform).
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Brfalse_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung, wenn  entweder false, ein NULL-Verweis oder 0 (null) ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Brtrue_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
	<summary>
 Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn  entweder true, nicht NULL oder ungleich 0 (null) ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldarg_0(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Argument am Index 0 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldarg_1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Argument am Index 1 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldarg_2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Argument am Index 2 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldarg_3(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Argument am Index 3 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldarg_S(System.Reflection.Emit.ILGenerator,System.Byte)">
	<summary>
 Lädt das Argument, auf das ein angegebener Kurzformindex verweist, in den Stapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldarga_S(System.Reflection.Emit.ILGenerator,System.Byte)">
	<summary>
 Lädt eine Argumentadresse in Kurzform in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_I4_0(System.Reflection.Emit.ILGenerator)">
	<summary>
 Legt den Ganzzahlwert 0 als int32 auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_I4_1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Legt den Ganzzahlwert 1 als int32 auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_I4_2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Legt den Ganzzahlwert 2 als int32 auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_I4_3(System.Reflection.Emit.ILGenerator)">
	<summary>
 Legt den Ganzzahlwert 3 als int32 auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_I4_4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Legt den Ganzzahlwert 4 als int32 auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_I4_5(System.Reflection.Emit.ILGenerator)">
	<summary>
 Legt den Ganzzahlwert 5 als int32 auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_I4_6(System.Reflection.Emit.ILGenerator)">
	<summary>
 Legt den Ganzzahlwert 6 als int32 auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_I4_7(System.Reflection.Emit.ILGenerator)">
	<summary>
 Legt den Ganzzahlwert 7 als int32 auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_I4_8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Legt den Ganzzahlwert 8 als int32 auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_I4_M1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Legt den Ganzzahlwert -1 als int32 auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldc_I4_S(System.Reflection.Emit.ILGenerator,System.SByte)">
	<summary>
 Legt den bereitgestellten int8-Wert als int32, Kurzform, auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldloc_0(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt die lokale Variable am Index 0 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldloc_1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt die lokale Variable am Index 1 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldloc_2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt die lokale Variable am Index 2 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldloc_3(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt die lokale Variable am Index 3 in den Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldloc_S(System.Reflection.Emit.ILGenerator,System.Byte)">
	<summary>
 Lädt die lokale Variable an einem bestimmten Index in den Auswertungsstapel, Kurzform.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldloc_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
	<summary>
 Lädt die lokale Variable an einem bestimmten Index in den Auswertungsstapel, Kurzform.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldloca_S(System.Reflection.Emit.ILGenerator,System.Byte)">
	<summary>
 Lädt die Adresse der lokalen Variablen am angegebenen Index in den Auswertungsstapel, Kurzform.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Starg_S(System.Reflection.Emit.ILGenerator,System.Byte)">
	<summary>
 Speichert den an der obersten Position des Auswertungsstapels befindlichen Wert im Argumentslot an einem angegebenen Index, Kurzform.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stloc_0(System.Reflection.Emit.ILGenerator)">
	<summary>
 Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am Index 0.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stloc_1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am Index 1.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stloc_2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am Index 2.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stloc_3(System.Reflection.Emit.ILGenerator)">
	<summary>
 Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am Index 3.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stloc_S(System.Reflection.Emit.ILGenerator,System.Byte)">
	<summary>
 Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am  (Kurzform).
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stloc_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
	<summary>
 Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am  (Kurzform).
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Callvirt(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
	<summary>
 Ruft eine spät gebundene Methode für ein Objekt auf und legt den Rückgabewert auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Castclass(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Wandelt ein als Verweis übergebenes Objekt in die angegebene Klasse um.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Cpobj(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Kopiert den Werttyp, der an der Adresse eines Objekts gespeichert ist (Typ &amp;, * oder native int), an die Adresse des Zielobjekts (Typ &amp;, * oder native int).
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Initobj(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Initialisiert alle Felder des Werttyps an einer angegebenen Adresse mit einem NULL-Verweis oder dem Wert 0 des entsprechenden primitiven Typs.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Isinst(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Überprüft, ob ein Objektverweis (Typ O) eine Instanz einer bestimmten Klasse ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldelem(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Lädt das Element an einem angegebenen Arrayindex als der in der Anweisung angegebene Typ auf die oberste Position des Auswertungsstapels. 
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldelem_I(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Element mit dem Typ native int an einem angegebenen Arrayindex als native int auf die oberste Position des Auswertungsstapels.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldelem_I1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Element mit dem Typ int8 an einem angegebenen Arrayindex als int32 an die oberste Position des Auswertungsstapels.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldelem_I2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Element mit dem Typ int16 an einem angegebenen Arrayindex als int32 an die oberste Position des Auswertungsstapels.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldelem_I4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Element mit dem Typ int32 an einem angegebenen Arrayindex als int32 an die oberste Position des Auswertungsstapels.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldelem_I8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Element mit dem Typ int64 an einem angegebenen Arrayindex als int64 an die oberste Position des Auswertungsstapels.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldelem_R4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Element vom Typ float32 an einem angegebenen Arrayindex als Typ F (Gleitkommawert) an die oberste Position des Auswertungsstapels.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldelem_R8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Element vom Typ float64 an einem angegebenen Arrayindex als Typ F (Gleitkommawert) an die oberste Position des Auswertungsstapels.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldelem_Ref(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Element mit Objektverweis an einem angegebenen Arrayindex als Typ O (Objektverweis) an die oberste Position des Auswertungsstapels.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldelem_U1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Element mit dem Typ unsigned int8 an einem angegebenen Arrayindex als int32 an die oberste Position des Auswertungsstapels.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldelem_U2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Element mit dem Typ unsigned int16 an einem angegebenen Arrayindex als int32 an die oberste Position des Auswertungsstapels.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldelem_U4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Lädt das Element mit dem Typ unsigned int32 an einem angegebenen Arrayindex als int32 an die oberste Position des Auswertungsstapels.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldelema(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Lädt die Adresse des Arrayelements an einem angegebenen Arrayindex als Typ &amp; (verwalteter Zeiger) an die oberste Position des Auswertungsstapels.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
	<summary>
 Sucht den Wert eines Felds in dem Objekt, für das sich derzeit ein Verweis auf dem Auswertungsstapel befindet.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldflda(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
	<summary>
 Sucht die Adresse eines Felds in dem Objekt, für das sich derzeit ein Verweis auf dem Auswertungsstapel befindet.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldlen(System.Reflection.Emit.ILGenerator)">
	<summary>
 Legt die Anzahl der Elemente eines nullbasierten, eindimensionalen Arrays auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldobj(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Kopiert das Werttypobjekt, auf das eine Adresse zeigt, an die oberste Position des Auswertungsstapels.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldsfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
	<summary>
 Legt den Wert eines statischen Felds auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldsflda(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
	<summary>
 Legt die Adresse eines statischen Felds auf dem Auswertungsstapel ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Ldstr(System.Reflection.Emit.ILGenerator,System.String)">
	<summary>
 Legt einen neuen Objektverweis auf ein in den Metadaten gespeichertes Zeichenfolgenliteral mittels Push ab.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Newarr(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Legt einen Objektverweis auf ein neues nullbasiertes, eindimensionales Array auf dem Auswertungsstapel ab, dessen Elemente einen bestimmten Typ aufweisen.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Newobj(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
	<summary>
 Erstellt ein neues Objekt oder eine neue Instanz eines Werttyps, wobei ein Objektverweis (Typ O) auf dem Auswertungsstapel abgelegt wird.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Newobj(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
	<summary>
 Erstellt ein neues Objekt oder eine neue Instanz eines Werttyps, wobei ein Objektverweis (Typ O) auf dem Auswertungsstapel abgelegt wird.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Rethrow(System.Reflection.Emit.ILGenerator)">
	<summary>
 Löst erneut die aktuelle Ausnahme aus.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stelem(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Ersetzt das Arrayelement am angegebenen Index durch den Wert im Auswertungsstapel, dessen Typ in der Anweisung angegeben ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stelem_I(System.Reflection.Emit.ILGenerator)">
	<summary>
 Ersetzt das Arrayelement am angegebenen Index durch den native int-Wert im Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stelem_I1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Ersetzt das Arrayelement am angegebenen Index durch den int8-Wert im Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stelem_I2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Ersetzt das Arrayelement am angegebenen Index durch den int16-Wert im Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stelem_I4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Ersetzt das Arrayelement am angegebenen Index durch den int32-Wert im Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stelem_I8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Ersetzt das Arrayelement am angegebenen Index durch den int64-Wert im Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stelem_R4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Ersetzt das Arrayelement am angegebenen Index durch den float32-Wert im Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stelem_R8(System.Reflection.Emit.ILGenerator)">
	<summary>
 Ersetzt das Arrayelement am angegebenen Index durch den float64-Wert im Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stelem_Ref(System.Reflection.Emit.ILGenerator)">
	<summary>
 Ersetzt das Arrayelement am angegebenen Index durch den Wert des Objektverweises (Typ O) im Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
	<summary>
 Ersetzt den im Feld eines Objektsverweises oder Zeigers gespeicherten Wert durch einen neuen Wert.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Stsfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
	<summary>
 Ersetzt den Wert eines statischen Felds durch einen Wert vom Auswertungsstapel.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Throw(System.Reflection.Emit.ILGenerator)">
	<summary>
 Löst das Ausnahmeobjekt aus, das sich momentan auf dem Auswertungsstapel befindet.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Unbox_Any(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Konvertiert die geschachtelte Darstellung eines n der Anweisung angegebenen Typs in seine nicht geschachtelte Form. 
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Prefix1(System.Reflection.Emit.ILGenerator)">
	<summary>
 Dies ist eine reservierte Anweisung.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Prefix2(System.Reflection.Emit.ILGenerator)">
	<summary>
 Dies ist eine reservierte Anweisung.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Prefix3(System.Reflection.Emit.ILGenerator)">
	<summary>
 Dies ist eine reservierte Anweisung.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Prefix4(System.Reflection.Emit.ILGenerator)">
	<summary>
 Dies ist eine reservierte Anweisung.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Prefix5(System.Reflection.Emit.ILGenerator)">
	<summary>
 Dies ist eine reservierte Anweisung.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Prefix6(System.Reflection.Emit.ILGenerator)">
	<summary>
 Dies ist eine reservierte Anweisung.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Prefix7(System.Reflection.Emit.ILGenerator)">
	<summary>
 Dies ist eine reservierte Anweisung.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Prefixref(System.Reflection.Emit.ILGenerator)">
	<summary>
 Dies ist eine reservierte Anweisung.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Constrained(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Schränkt den Typ ein, für den eine virtuelle Methode aufgerufen wird.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Readonly(System.Reflection.Emit.ILGenerator)">
	<summary>
 Gibt an, dass beim nachfolgenden Vorgang zur Arrayadresse zur Laufzeit keine Typüberprüfung durchgeführt wird und dass ein verwalteter Zeiger zurückgegeben wird, der nur bedingt geändert werden kann.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Tailcall(System.Reflection.Emit.ILGenerator)">
	<summary>
 Führt eine Postfix-Methodenaufrufanweisung in der Weise aus, dass der Stapelrahmen der aktuellen Methode vor der Ausführung der eigentlichen Aufrufanweisung entfernt wird.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Unaligned(System.Reflection.Emit.ILGenerator,System.SByte)">
	<summary>
 Gibt an, dass eine Adresse, die sich momentan oben auf dem Stapel befindet, möglicherweise nicht an der eigentlichen Größe der unmittelbar darauf folgenden ldind-Anweisung, stind-Anweisung, ldfld-Anweisung, stfld-Anweisung, ldobj-Anweisung, stobj-Anweisung, initblk-Anweisung oder cpblk-Anweisung ausgerichtet ist.
 </summary>
</member><member name="M:OnUtils.Emit.IL.IL.Volatile(System.Reflection.Emit.ILGenerator)">
	<summary>
 Gibt an, dass es sich bei einer Adresse, die sich momentan oben auf dem Auswertungsstapel befindet, möglicherweise um eine flüchtige Adresse handelt und daher die aus diesem Speicherort gelesenen Ergebnisse nicht zwischengespeichert werden können oder mehrere für diesen Speicherort ausgeführte Speichervorgänge nicht unterdrückt werden können.
 </summary>
</member><member name="T:OnUtils.Emit.IL.IL">
	<summary>
 Beinhaltet Extension-Methoden für die <see cref="T:System.Reflection.Emit.ILGenerator"/>-Klasse, welche nach den möglichen OpCodes <see cref="T:System.Reflection.Emit.OpCodes"/> benannt sind und nur gültige Parameter zulassen.
 </summary>
</member><member name="P:OnUtils.GuardedThread.DefaultDoCatch">
	<summary>
 Gibt an, ob Exceptions in neu erstellten <see cref="T:OnUtils.GuardedThread"/>-Objekten standardmäßig gefangen werden.
 Der Standardwert richtet sich danach, ob kein Debugger verfügbar ist. Bei angehängtem Debugger werden Exceptions standardmäßig nicht gefangen.
 </summary>
</member><member name="P:OnUtils.GuardedThread.InternalThread">
	<summary>
 Das <see cref="T:System.Threading.Thread"/>-Objekt, das für das Ausführen der im Konstruktor angegebenen Methode verwendet wird.
 </summary>
</member><member name="P:OnUtils.GuardedThread.DoCatch">
	<summary>
 Gibt an, ob Exceptions in der ausgeführten Methode abgefangen werden.
 Der Standardwert ist <see cref="P:OnUtils.GuardedThread.DefaultDoCatch"/>.
 </summary>
</member><member name="M:OnUtils.GuardedThread.#ctor(System.Action)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewExecutionMethod">Die Methode, die vom Thread ausgeführt wird.</param>
</member><member name="T:OnUtils.GuardedThread">
	<summary>
 Wrappt den Aufruf der im Konstruktor angegebenen Methode in einen Try-Catch-Block.
 Das zugrundeliegende <see cref="T:System.Threading.Thread"/>-Objekt kann über die <see cref="P:OnUtils.GuardedThread.InternalThread"/>-Property abgerufen werden.
 </summary>
</member><member name="E:OnUtils.Streams.IDataBufferSource`1.DataReceived">
	<summary>
 Wird ausgelöst, wenn die Datenquelle neue Daten empfangen hat.
 </summary>
</member><member name="M:OnUtils.Streams.IDataBufferSource`1.Flush">
	<summary>
 Ruft das <see cref="E:OnUtils.Streams.IDataBufferSource`1.DataReceived"/>-Event für Daten auf, die möglicherweise schon vorhanden sind, jedoch nicht weiterverarbeitet wurden.
 </summary>
</member><member name="M:OnUtils.Streams.IDataBufferSource`1.CompareData(`0,`0)">
	<summary>
 Vergleicht zwei Daten miteinander.
 Gibt True zurück, wenn beide Daten als gleich erachtet werden.
 </summary>
</member><member name="T:OnUtils.Streams.IDataBufferSource`1">
	<summary>
 Stellt Member bereit, die von <see cref="T:OnUtils.Streams.DataBuffer`1"/> verwendet werden, um Daten zu puffern.
 </summary>
	<typeparam name="T">Der Typ der Daten, die gepuffert werden.</typeparam>
</member><member name="P:OnUtils.Streams.StringStream.SourceString">
	<summary>
 Gibt den Quellstring an.
 </summary>
</member><member name="P:OnUtils.Streams.StringStream.CurrentIndex">
	<summary>
 Gibt den Index des nächsten Zeichens im String an.
 </summary>
</member><member name="P:OnUtils.Streams.StringStream.Current">
	<summary>
 Gibt das nächste Zeichen im Stream an.
 </summary>
</member><member name="P:OnUtils.Streams.StringStream.EndOfStream">
	<summary>
 Gibt an, ob das Ende des Streams erreicht wurde.
 </summary>
</member><member name="P:OnUtils.Streams.StringStream.RemainingChars">
	<summary>
 Gibt die Anzahl an verbleibenden Zeichen im Stream zurück.
 </summary>
</member><member name="M:OnUtils.Streams.StringStream.#ctor">
	<summary>
 Konstruktor für abgeleitete Klassen. Rufen Sie <see cref="M:OnUtils.Streams.StringStream.Initialize(System.String)"/> auf, bevor Sie den Stream verwenden.
 </summary>
</member><member name="M:OnUtils.Streams.StringStream.#ctor(System.String)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewSourceString">Der Quellstring, der verarbeitet wird.</param>
</member><member name="M:OnUtils.Streams.StringStream.Initialize(System.String)">
	<summary>
 Initialisiert den StringStream mit dem angegebenen String. Darf von abgeleiteten Klassen nur aufgerufen werden, wenn der parameterlose Konstruktor verwendet wurde.
 </summary>
	<param name="NewSourceString">Der Quellstring, der verarbeitet wird.</param>
</member><member name="M:OnUtils.Streams.StringStream.Advance">
	<summary>
 Überspringt das nächste Zeichen im Stream.
 </summary>
</member><member name="M:OnUtils.Streams.StringStream.Advance(System.Int32)">
	<summary>
 Überspringt die nächsten <paramref name="Count"/> Zeichen im Stream.
 </summary>
	<param name="Count">Die Anzahl an Zeichen, die übersprungen werden.</param>
</member><member name="M:OnUtils.Streams.StringStream.ReadChar">
	<summary>
 Gibt das nächste Zeichen im String zurück, ohne es zu entfernen.
 </summary>
</member><member name="M:OnUtils.Streams.StringStream.Peek(System.Int32)">
	<summary>
 Gibt die nächsten <paramref name="Count"/> Zeichen zurück, ohne sie zu entfernen.
 Wird das Ende des Streams erreicht, bevor genügend Zeichen gelesen werden, wird eine <see cref="T:OnUtils.Streams.EndOfStreamException"/> ausgelöst.
 </summary>
	<param name="Count">Die Anzahl an zu lesenden Zeichen.</param>
</member><member name="M:OnUtils.Streams.StringStream.Read(System.Int32)">
	<summary>
 Gibt die nächsten <paramref name="Count"/> Zeichen zurück.
 Wird das Ende des Streams erreicht, bevor genügend Zeichen gelesen werden, wird eine <see cref="T:OnUtils.Streams.EndOfStreamException"/> ausgelöst.
 </summary>
	<param name="Count">Die Anzahl an zu lesenden Zeichen.</param>
</member><member name="M:OnUtils.Streams.StringStream.PeekToEnd">
	<summary>
 Gibt die verbleibenden Zeichen bis zum Ende zurück, ohne sie zu entfernen.
 </summary>
</member><member name="M:OnUtils.Streams.StringStream.ReadToEnd">
	<summary>
 Gibt die verbleibenden Zeichen bis zum Ende zurück.
 </summary>
</member><member name="M:OnUtils.Streams.StringStream.PeekToNext(System.Char[])">
	<summary>
 Gibt die Zeichen bis zum nächsten vorkommen eines in <paramref name="Chars"/> vorkommenden End-Zeichens zurück, ohne sie zu entfernen.
 Wird das Ende des Streams erreicht, bevor ein End-Zeichen gefunden wurde, wird der String bis zum Ende zurückgegeben.
 Das gefundene End-Zeichen ist nicht im zurückgegebenen String enthalten.
 </summary>
	<param name="Chars">Die Zeichen, bis zu denen gelesen wird.</param>
</member><member name="M:OnUtils.Streams.StringStream.ReadToNext(System.Char[])">
	<summary>
 Gibt die Zeichen bis zum nächsten vorkommen eines in <paramref name="Chars"/> vorkommenden End-Zeichens zurück.
 Die Stream-Position wird hinter das gefundene End-Zeichen gesetzt.
 Wird das Ende des Streams erreicht, bevor ein End-Zeichen gefunden wurde, wird der String bis zum Ende zurückgegeben.
 Das gefundene End-Zeichen ist nicht im zurückgegebenen String enthalten.
 </summary>
	<param name="Chars">Die Zeichen, bis zu denen gelesen wird.</param>
</member><member name="M:OnUtils.Streams.StringStream.PeekToNext(System.String[])">
	<summary>
 Gibt die Zeichen bis zum nächsten vorkommen eines in <paramref name="Strings"/> vorkommenden Strings zurück, ohne sie zu entfernen.
 Wird das Ende des Streams erreicht, bevor ein End-Zeichen gefunden wurde, wird der String bis zum Ende zurückgegeben.
 Der gefundene String aus <paramref name="Strings"/> ist nicht im zurückgegebenen String enthalten.
 </summary>
	<param name="Strings">Der String, bis zu denen gelesen wird.</param>
</member><member name="M:OnUtils.Streams.StringStream.ReadToNext(System.String[])">
	<summary>
 Gibt die Zeichen bis zum nächsten vorkommen eines in <paramref name="Strings"/> vorkommenden End-Strings zurück.
 Die Stream-Position wird hinter den End-String gesetzt.
 Wird das Ende des Streams erreicht, bevor ein End-Zeichen gefunden wurde, wird der String bis zum Ende zurückgegeben.
 Der gefundene End-String ist nicht im zurückgegebenen String enthalten.
 </summary>
	<param name="Strings">Der String, bis zu denen gelesen wird.</param>
</member><member name="T:OnUtils.Streams.StringStream">
	<summary>
 Bietet Methoden zum Lesen von Strings in Blöcken.
 </summary>
</member><member name="T:OnUtils.WinApi.WindowStyles">
	<summary>
 Beinhaltet WinApi-Aufrufe, die mit den Funktionen GetWindowLong und SetWindowLong zu tun haben.
 </summary>
</member><member name="M:OnUtils.Wpf.AsyncDelegateCommand.#ctor">
	<summary>
 Setzt keine Callbacks. Die <see cref="M:OnUtils.Wpf.AsyncDelegateCommand.Execute(System.Object)"/>-Funktion muss überschrieben werden.
 <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> ist standardmäßig True.
 </summary>
</member><member name="M:OnUtils.Wpf.AsyncDelegateCommand.#ctor(System.Action{System.Object})">
	<summary>
 Parameter wird an Delegaten übergeben.
 CanExecute gibt <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> zurück.
 <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> ist standardmäßig True.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
</member><member name="M:OnUtils.Wpf.AsyncDelegateCommand.#ctor(System.Action)">
	<summary>
 Command-Parameter wird ignoriert.
 CanExecute gibt <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> zurück.
 <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> ist standardmäßig True.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
</member><member name="M:OnUtils.Wpf.AsyncDelegateCommand.#ctor(System.Action{System.Object},System.Boolean)">
	<summary>
 Command-Parameter wird an Delegaten übergeben.
 CanExecute gibt <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> zurück.
 <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> ist standardmäßig <paramref name="NewIsEnabled"/>.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
	<param name="NewIsEnabled">Gibt den Standardwert von <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> an.</param>
</member><member name="M:OnUtils.Wpf.AsyncDelegateCommand.#ctor(System.Action,System.Boolean)">
	<summary>
 Command-Parameter wird ignoriert.
 CanExecute gibt <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> zurück.
 <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> ist standardmäßig <paramref name="NewIsEnabled"/>.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
	<param name="NewIsEnabled">Gibt den Standardwert von <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> an.</param>
</member><member name="M:OnUtils.Wpf.AsyncDelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Boolean})">
	<summary>
 Command-Parameter wird an Delegaten übergeben.
 CanExecute gibt den Wert des Callbacks <paramref name="NewIsEnabledCallback"/> zurück.
 Das manuelle Setzen von <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> löst das IsEnabledCallback erneut aus.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
	<param name="NewIsEnabledCallback">Ein Delegat, der zurückgibt, ob das Command ausgeführt werden kann.</param>
</member><member name="M:OnUtils.Wpf.AsyncDelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
	<summary>
 Command-Parameter wird ignoriert.
 CanExecute gibt den Wert des Callbacks <paramref name="NewIsEnabledCallback"/> zurück.
 Das manuelle Setzen von <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> löst das IsEnabledCallback erneut aus.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
	<param name="NewIsEnabledCallback">Ein Delegat, der zurückgibt, ob das Command ausgeführt werden kann.</param>
</member><member name="M:OnUtils.Wpf.AsyncDelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
	<summary>
 Command-Parameter wird an Delegaten übergeben.
 CanExecute gibt den Wert des Callbacks <paramref name="NewIsEnabledCallback"/> zurück.
 Das manuelle Setzen von <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> löst das IsEnabledCallback erneut aus.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
	<param name="NewIsEnabledCallback">Ein Delegat, der zurückgibt, ob das Command ausgeführt werden kann.</param>
</member><member name="M:OnUtils.Wpf.AsyncDelegateCommand.#ctor(System.Action,System.Func{System.Object,System.Boolean})">
	<summary>
 Command-Parameter wird ignoriert.
 CanExecute gibt den Wert des Callbacks <paramref name="NewIsEnabledCallback"/> zurück.
 Das manuelle Setzen von <see cref="P:OnUtils.Wpf.DelegateCommand.IsEnabled"/> löst das IsEnabledCallback erneut aus.
 </summary>
	<param name="NewTarget">Der Delegat, der ausgeführt wird.</param>
	<param name="NewIsEnabledCallback">Ein Delegat, der zurückgibt, ob das Command ausgeführt werden kann.</param>
</member><member name="M:OnUtils.Wpf.AsyncDelegateCommand.Execute(System.Object)">
	<summary>
 Startet einen neuen Task, der <see cref="M:OnUtils.Wpf.DelegateCommand.Execute(System.Object)"/> ausführt.
 </summary>
</member><member name="E:OnUtils.Wpf.IViewModelCollectionSource`1.ItemAdded">
	<summary>
 Wird ausgelöst, wenn ein Element zur Quelle hinzugefügt wurde.
 </summary>
</member><member name="E:OnUtils.Wpf.IViewModelCollectionSource`1.ItemRemoved">
	<summary>
 Wird ausgelöst, wenn ein Element aus der Quelle entfernt wurde.
 </summary>
</member><member name="E:OnUtils.Wpf.IViewModelCollectionSource`1.ItemMoved">
	<summary>
 Wird ausgelöst, wenn ein Element in der Quelle verschoben wurde.
 </summary>
</member><member name="E:OnUtils.Wpf.IViewModelCollectionSource`1.ItemReplaced">
	<summary>
 Wird ausgelöst, wenn ein Element der Quelle durch ein anderes ersetzt wurde.
 </summary>
</member><member name="E:OnUtils.Wpf.IViewModelCollectionSource`1.CollectionCleared">
	<summary>
 Wird ausgelöst, wenn alle Elemente aus der Quelle entfernt werden.
 </summary>
</member><member name="T:OnUtils.Wpf.IViewModelCollectionSource`1">
	<summary>
 Stellt eine Datenquelle für <see cref="T:OnUtils.Wpf.ViewModelCollection`2"/> dar.
 </summary>
	<typeparam name="T">Der Typ der Quell-Elemente.</typeparam>
</member><member name="P:OnUtils.Wpf.ViewModelBase.EnableRecursiveOnPropertyChanged">
	<summary>
 Gibt an, ob Abhängigkeiten von Properties aufgelöst werden.
 </summary>
</member><member name="M:OnUtils.Wpf.ViewModelBase.#ctor">
	<summary>
 Abhängigkeiten von Properties werden aufgelöst.
 </summary>
</member><member name="M:OnUtils.Wpf.ViewModelBase.#ctor(System.Boolean)">
	<summary>
 Wenn <paramref name="NewEnableRecursiveOnPropertyChanged"/> True ist, werden Abhängigkeiten von Properties aufgelöst (siehe <see cref="T:OnUtils.Wpf.DependencyAttribute"/>).
 </summary>
</member><member name="M:OnUtils.Wpf.ViewModelBase.AddExternalPropertyDependency(System.String,System.ComponentModel.INotifyPropertyChanged,System.String[])">
	<summary>
 Fügt eine Abhängigkeit von einer Property dieses ViewModels (<paramref name="ViewModelPropertyName"/>) zu Properties (<paramref name="DependsOn"/>) in einem anderen Objekt (<paramref name="Source"/>) hinzu.
 </summary>
	<param name="Source">Das Objekt, das die Eigenschaft enthält, von der die <paramref name="ViewModelPropertyName"/>-Property abhängt.</param>
	<param name="ViewModelPropertyName">Der Name der Property in diesem ViewModel.</param>
	<param name="DependsOn">Die Namen der Properties, von denen <paramref name="ViewModelPropertyName"/> abhängt.</param>
</member><member name="M:OnUtils.Wpf.ViewModelBase.OnPropertyChanged(System.String)">
	<summary>
 Wenn <see cref="P:OnUtils.Wpf.ViewModelBase.EnableRecursiveOnPropertyChanged"/> True ist, wird für jede abhängige Property ebenfalls das PropertyChanged-Event ausgelöst.
 </summary>
	<param name="PropertyName">Der Name der Property, die sich geändert hat.</param>
</member><member name="M:OnUtils.Wpf.ViewModelBase.OnPropertyChanged(System.String[])">
	<summary>
 Wenn <see cref="P:OnUtils.Wpf.ViewModelBase.EnableRecursiveOnPropertyChanged"/> True ist, wird für jede abhängige Property ebenfalls das PropertyChanged-Event ausgelöst.
 </summary>
	<param name="PropertyNames">Die Namen der Properties, die sich geändert haben.</param>
</member><member name="P:OnUtils.Wpf.ViewModelBase.IsInDesignMode">
	<summary>
 Gibt an, ob der aktuelle Code im Designer von VisualStudio ausgeführt wird.
 Kann verwendet werden, um z.B. Dummy-Daten im Designer anzuzeigen.
 </summary>
</member><member name="T:OnUtils.Wpf.ViewModelBase">
	<summary>
 Stellt eine Basisklasse für ViewModels für WPF und MVVM dar. Verwenden Sie das <see cref="T:OnUtils.Wpf.DependencyAttribute"/>-Attribut, um das Auslösen von <see cref="T:OnUtils.Wpf.NotifyPropertyChanged"/> für abhängige Properties zu verketten.
 </summary>
</member><member name="T:OnUtils.Emit.PredefinedMembers">
	<summary>
 Beinhaltet bei <see cref="N:System.Reflection.Emit"/> häufig verwendete Typen und Member.
 Gegliedert nach dem .Net-Framework.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleD.X">
	<summary>
 Die X-Koordinate der linken oberen Ecke des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleD.Y">
	<summary>
 Die Y-Koordinate der linken oberen Ecke des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleD.Width">
	<summary>
 Die Breite des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleD.Height">
	<summary>
 Die Höhe des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleD.Left">
	<summary>
 Die X-Position des linken Randes des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleD.Top">
	<summary>
 Die Y-Position des oberen Randes des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleD.Right">
	<summary>
 Die X-Position des rechten Randes des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleD.Bottom">
	<summary>
 Die Y-Position des unteren Randes des Rechtecks.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
	<summary>
 Konstruktor.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleD.Contains(System.Double,System.Double)">
	<summary>
 Prüft, ob die angegebenen Koordinaten innerhalb dieses Rechtecks liegen.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleD.Contains(OnUtils.CommonData.RectangleD)">
	<summary>
 Prüft, ob das angegebene Rechteck vollständig innerhalb dieses Rechtecks liegt.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleD.Intersect(OnUtils.CommonData.RectangleD,OnUtils.CommonData.RectangleD)">
	<summary>
 Gibt den von den beiden angegebenen Rechtecken eingeschlossenen Bereich zurück.
 Wenn sich die Rechtecke nicht schneiden, wird ein leeres <see cref="T:OnUtils.CommonData.RectangleD"/> zurückgegeben.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleD.Union(OnUtils.CommonData.RectangleD,OnUtils.CommonData.RectangleD)">
	<summary>
 Gibt ein Rechteck zurück, das die beiden angegebenen Rechtecke umschließt.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleD.ToFormsRectangleF">
	<summary>
 Konvertiert die Koordinaten und Größen zu Single und gibt ein <see cref="T:System.Drawing.RectangleF"/> zurück.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleD.ToWpfRect">
	<summary>
 Gibt ein <see cref="T:System.Windows.Rect"/> mit den Werten dieses Rechtecks, zur Verwendung in WPF, zurück.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleD.op_Equality(OnUtils.CommonData.RectangleD,OnUtils.CommonData.RectangleD)">
	<summary>
 Prüft, ob die beiden Rechtecke die selbe Position und Größe besitzen.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleD.op_Inequality(OnUtils.CommonData.RectangleD,OnUtils.CommonData.RectangleD)">
	<summary>
 Prüft, ob die beiden Rechtecke eine unterschiedliche Position oder Größe besitzen.
 </summary>
</member><member name="T:OnUtils.CommonData.RectangleD">
	<summary>
 Speichert einen Satz von vier Gleitkommazahlen doppelter Genauigkeit, die die Position und Größe eines Rechtecks angeben.
 </summary>
</member><member name="T:OnUtils.Wpf.ToolTipButton">
	<summary>
 Ein Button, der beim Klick, falls vorhanden, den zugeordneten ToolTip öffnet.
 ToolTip muss auf ein Objekt des Typs <see cref="T:System.Windows.Controls.ToolTip"/> festgelegt werden, andernfalls wird eine <see cref="T:OnUtils.Wpf.InvalidToolTipException"/> ausgelöst.
 </summary>
</member><member name="M:OnUtils.WinApi.MouseAndKeyboard.MouseEvent(OnUtils.WinApi.MouseAction,System.Int32,System.Int32)">
	<summary>
 Führt die angegebene <see cref="T:OnUtils.WinApi.MouseAction">Maus-Aktion</see> durch.
 </summary>
	<param name="Action">Die Aktion, die durchgeführt wird.</param>
	<param name="X">Die X-Position, an die die Maus verschoben wird.</param>
	<param name="Y">Die Y-Position, an die die Maus verschoben wird.</param>
</member><member name="T:OnUtils.WinApi.MouseAndKeyboard">
	<summary>
 Beinhaltet WinApi-Aufrufe, die mit Maus und Tastatur zu tun haben.
 </summary>
</member><member name="P:OnUtils.Results.IErroredResult`1.Error">
	<summary>
 Der Fehler im Vorgang.
 </summary>
</member><member name="T:OnUtils.Results.IErroredResult`1">
	<summary>
 Beschreibt ein Ergebnis, welches einen Fehler eines Vorgangs zurückgibt.
 </summary>
	<typeparam name="TError">Der Typ des Fehlers</typeparam>
</member><member name="P:OnUtils.IndexedItemEventArgs`1.Index">
	<summary>
 Der Index des Elements, für das das Event ausgelöst wurde.
 </summary>
</member><member name="M:OnUtils.IndexedItemEventArgs`1.#ctor(`0,System.Int32)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewItem"><see cref="P:OnUtils.ItemEventArgs`1.Item"/></param>
	<param name="NewIndex"><see cref="P:OnUtils.IndexedItemEventArgs`1.Index"/></param>
</member><member name="T:OnUtils.IndexedItemEventArgs`1">
	<summary>
 Enthält ein Element der Auflistung, die das Event ausgelöst hat und den Index des Elementes in der Auflistung.
 </summary>
</member><member name="F:OnUtils.Wpf.AutoScrollingListBox.AutoScrollMode.None">
	<summary>
 Elemente werden nicht automatisch in den Sichtbereich gescrollt.
 </summary>
</member><member name="F:OnUtils.Wpf.AutoScrollingListBox.AutoScrollMode.ScrollIntoView">
	<summary>
 Elemente werden nur in den Sichtbereich gescrollt. Ist ein Element vorher vollständig außerhalb des Sichtbereichs, dann wird so weit gescrollt, dass es gerade vollständig im Sichtbereich ist.
 </summary>
</member><member name="F:OnUtils.Wpf.AutoScrollingListBox.AutoScrollMode.ScrollToCenter">
	<summary>
 Elemente werden zentriert.
 Funktioniert nur, wenn <see cref="F:System.Windows.Controls.VirtualizingStackPanel.IsVirtualizingProperty"/> deaktiviert ist und <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel"/> entweder ein <see cref="T:System.Windows.Controls.StackPanel"/> oder ein <see cref="T:System.Windows.Controls.VirtualizingStackPanel"/> ist.
 </summary>
</member><member name="T:OnUtils.Wpf.AutoScrollingListBox.AutoScrollMode">
	<summary>
 Eine Angabe über das Scrollverhalten einer <see cref="T:OnUtils.Wpf.AutoScrollingListBox"/>.
 </summary>
</member><member name="P:OnUtils.Wpf.AutoScrollingListBox.ScrollMode">
	<summary>
 Gibt das Scrollverhalten dieser ListBox an. Siehe <see cref="T:OnUtils.Wpf.AutoScrollingListBox.AutoScrollMode"/>.
 </summary>
</member><member name="M:OnUtils.Wpf.AutoScrollingListBox.ScrollToCenter(System.Object)">
	<summary>
 Scrollt das angegebene Element in die Mitte des sichtbaren Bereiches.
 </summary>
</member><member name="T:OnUtils.Wpf.AutoScrollingListBox">
	<summary>
 Eine ListBox, die Elemente beim Markieren automatisch in den sichtbaren Bereich scrollen kann.
 Siehe http://dlaa.me/blog/post/9556292 für Details.
 </summary>
</member><member name="E:OnUtils.Wpf.NotifyPropertyChanged.PropertyChanged">
	<summary>
 Wird ausgelöst, wenn sich eine Property verändert hat.
 </summary>
</member><member name="E:OnUtils.Wpf.NotifyPropertyChanged.ExtendedPropertyChanged">
	<summary>
 Wird ausgelöst, wenn sich eine Property verändert hat, aber nur dann, wenn bei <see cref="M:OnUtils.Wpf.NotifyPropertyChanged.OnPropertyChanged(System.String)"/> OldValue und NewValue angegeben wurden oder wenn ChangeIfDifferent mit nur einem PropertyName-Argument aufgerufen wurde.
 Abonnenten können somit z.B. EventHandler von ersetzten Objekten entfernen.
 </summary>
</member><member name="M:OnUtils.Wpf.NotifyPropertyChanged.OnPropertyChanged(System.String)">
	<summary>
 Löst das <see cref="E:OnUtils.Wpf.NotifyPropertyChanged.PropertyChanged"/>-Event für eine Property aus.
 </summary>
	<param name="PropertyName">Der Name der Property, die sich geändert hat.</param>
</member><member name="M:OnUtils.Wpf.NotifyPropertyChanged.OnExtendedPropertyChanged(System.String,System.Object,System.Object)">
	<summary>
 Löst neben dem <see cref="E:OnUtils.Wpf.NotifyPropertyChanged.PropertyChanged"/>-Event auch das <see cref="E:OnUtils.Wpf.NotifyPropertyChanged.ExtendedPropertyChanged"/>-Event für den angegebenen Namen aus.
 </summary>
	<param name="PropertyName">Der Name der geänderten Eigenschaft.</param>
	<param name="OldValue">Der alte Wert der Eigenschaft.</param>
	<param name="NewValue">Der neue Wert der Eigenschaft.</param>
</member><member name="M:OnUtils.Wpf.NotifyPropertyChanged.OnPropertyChanged(System.String[])">
	<summary>
 Löst für jedes Element in <paramref name="Names"/> das <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>-Event aus.
 </summary>
	<param name="PropertyNames">Die Namen der Properties, die sich geändert haben.</param>
</member><member name="M:OnUtils.Wpf.NotifyPropertyChanged.ExtendedChangeIfDifferent``1(``0@,``0,System.String)">
	<summary>
 Prüft, ob <paramref name="Target"/> und <paramref name="NewValue"/> gleich sind (<see cref="M:System.Object.Equals(System.Object)"/>).
 Ist das nicht der Fall, wird <paramref name="Target"/> überschrieben (wird ByRef übergeben), <see cref="M:OnUtils.Wpf.NotifyPropertyChanged.OnExtendedPropertyChanged(System.String,System.Object,System.Object)"/> aufgerufen und True zurückgegeben.
 Andernfalls wird nur False zurückgegeben.
 </summary>
	<param name="Target">Üblicherweise ein Feld, das den Wert der Property speichert.</param>
	<param name="NewValue">Üblicherweise der Parameter des Setters der Property</param>
	<param name="PropertyName">Der Name der Eigenschaft, die sich geändert hat. Das <see cref="E:OnUtils.Wpf.NotifyPropertyChanged.ExtendedPropertyChanged"/>-Event wird für diese Eigenschaft ausgelöst.</param>
</member><member name="M:OnUtils.Wpf.NotifyPropertyChanged.ChangeIfDifferent``1(``0@,``0,System.String[])">
	<summary>
 Prüft, ob <paramref name="Target"/> und <paramref name="NewValue"/> gleich sind (<see cref="M:System.Object.Equals(System.Object)"/>).
 Ist das nicht der Fall, wird <paramref name="Target"/> überschrieben (wird ByRef übergeben), <see cref="M:OnUtils.Wpf.NotifyPropertyChanged.OnPropertyChanged(System.String)"/> aufgerufen und True zurückgegeben.
 Andernfalls wird nur False zurückgegeben.
 Das <see cref="E:OnUtils.Wpf.NotifyPropertyChanged.ExtendedPropertyChanged"/>-Event wird nicht ausgelöst, da mehrere Eigenschaften angegeben wurden und nicht klar ist, für welche Eigenschaft die Werte gelten.
 </summary>
	<param name="Target">Üblicherweise ein Feld, das den Wert der Property speichert.</param>
	<param name="NewValue">Üblicherweise der Parameter des Setters der Property</param>
	<param name="PropertyNames">Die Namen der Eigenschaften, die sich geändert haben. Das können auch abhängige Eigenschaften sein (z.B. Kreisradius geändert -&gt; Umfang ändert sich auch).</param>
</member><member name="M:OnUtils.Wpf.NotifyPropertyChanged.ChangeIfDifferent``1(``0@,``0)">
	<summary>
 Prüft, ob <paramref name="Target"/> und <paramref name="NewValue"/> gleich sind (<see cref="M:System.Object.Equals(System.Object)"/>).
 Ist das nicht der Fall, wird <paramref name="Target"/> überschrieben (wird ByRef übergeben) und True zurückgegeben.
 Andernfalls wird nur False zurückgegeben.
 </summary>
	<param name="Target">Üblicherweise ein Feld, das den Wert der Property speichert.</param>
	<param name="NewValue">Üblicherweise der Parameter des Setters der Property</param>
</member><member name="T:OnUtils.Wpf.NotifyPropertyChanged">
	<summary>
 Implementiert <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> und stellt Hilfsmethoden bereit, um damit zu arbeiten.
 </summary>
</member><member name="P:OnUtils.Wpf.RecursionException.OriginalPropertyName">
	<summary>
 Der Name der ersten geprüften Property.
 </summary>
</member><member name="P:OnUtils.Wpf.RecursionException.FaultyPropertyName">
	<summary>
 Der Name der Property, ab der die Rekursion auftritt.
 </summary>
</member><member name="P:OnUtils.Wpf.RecursionException.TraversedStack">
	<summary>
 Die Properties, in der Reihenfolge in der sie geprüft wurden, von der ersten bis zur fehlerhaften.
 </summary>
</member><member name="T:OnUtils.Wpf.RecursionException">
	<summary>
 Wird ausgelöst, wenn in einem <see cref="T:OnUtils.Wpf.ViewModelBase`1"/> durch Abhängigkeiten von Properties eine Rekursion auftritt.
 </summary>
</member><member name="P:OnUtils.Wpf.ViewModelCollectionItemDisposingEventArgs`2.ViewModel">
	<summary>
 Das ViewModel, das dem entfernten Objekt zugeordnet ist.
 </summary>
</member><member name="M:OnUtils.Wpf.ViewModelCollectionItemDisposingEventArgs`2.#ctor(`0,`1)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewItem">Siehe <see cref="P:OnUtils.ItemEventArgs`1.Item"/>.</param>
	<param name="NewViewModel">Siehe <see cref="P:OnUtils.Wpf.ViewModelCollectionItemDisposingEventArgs`2.ViewModel"/>.</param>
</member><member name="T:OnUtils.Wpf.ViewModelCollectionItemDisposingEventArgs`2">
	<summary>
 Enthält Informationen über das <see cref="E:OnUtils.Wpf.ViewModelCollection`2.ItemDisposing"/>-Event.
 </summary>
	<typeparam name="TItem">Der Typ des entfernten Objektes.</typeparam>
	<typeparam name="TViewModel">Der Typ des ViewModels, das dem entfernten Objekt zugeordnet ist.</typeparam>
</member><member name="P:OnUtils.CommonData.RectangleF.X">
	<summary>
 Die X-Koordinate der linken oberen Ecke des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleF.Y">
	<summary>
 Die Y-Koordinate der linken oberen Ecke des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleF.Width">
	<summary>
 Die Breite des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleF.Height">
	<summary>
 Die Höhe des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleF.Left">
	<summary>
 Die X-Position des linken Randes des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleF.Top">
	<summary>
 Die Y-Position des oberen Randes des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleF.Right">
	<summary>
 Die X-Position des rechten Randes des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleF.Bottom">
	<summary>
 Die Y-Position des unteren Randes des Rechtecks.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Konstruktor.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleF.Contains(System.Single,System.Single)">
	<summary>
 Prüft, ob die angegebenen Koordinaten innerhalb dieses Rechtecks liegen.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleF.Contains(OnUtils.CommonData.RectangleF)">
	<summary>
 Prüft, ob das angegebene Rechteck vollständig innerhalb dieses Rechtecks liegt.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleF.ToFormsRectangleF">
	<summary>
 Konvertiert die Koordinaten und Größen zu Single und gibt ein <see cref="T:System.Drawing.RectangleF"/> zurück.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleF.ToWpfRect">
	<summary>
 Gibt ein <see cref="T:System.Windows.Rect"/> mit den Werten dieses Rechtecks, zur Verwendung in WPF, zurück.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleF.Intersect(OnUtils.CommonData.RectangleF,OnUtils.CommonData.RectangleF)">
	<summary>
 Gibt den von den beiden angegebenen Rechtecken eingeschlossenen Bereich zurück.
 Wenn sich die Rechtecke nicht schneiden, wird ein leeres <see cref="T:OnUtils.CommonData.RectangleF"/> zurückgegeben.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleF.Union(OnUtils.CommonData.RectangleF,OnUtils.CommonData.RectangleF)">
	<summary>
 Gibt ein Rechteck zurück, das die beiden angegebenen Rechtecke umschließt.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleF.op_Equality(OnUtils.CommonData.RectangleF,OnUtils.CommonData.RectangleF)">
	<summary>
 Prüft, ob die beiden Rechtecke die selbe Position und Größe besitzen.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleF.op_Inequality(OnUtils.CommonData.RectangleF,OnUtils.CommonData.RectangleF)">
	<summary>
 Prüft, ob die beiden Rechtecke eine unterschiedliche Position oder Größe besitzen.
 </summary>
</member><member name="T:OnUtils.CommonData.RectangleF">
	<summary>
 Speichert einen Satz von vier Gleitkommazahlen einfacher Genauigkeit, die die Position und Größe eines Rechtecks angeben.
 </summary>
</member><member name="M:OnUtils.DelegateEnumerable`1.#ctor(System.Func{System.Collections.Generic.IEnumerator{`0}})">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewGetEnumeratorCallback">Wird ausgeführt, wenn die GetEnumerator-Funktion des IEnumerables aufgerufen wird.</param>
</member><member name="T:OnUtils.DelegateEnumerable`1">
	<summary>
 Implementiert <see cref="T:System.Collections.Generic.IEnumerable`1"/> und ruft eine Callback-Funktion für die GetEnumerator-Funktion auf.
 </summary>
</member><member name="T:OnUtils.LogicSortComparer">
	<summary>
 Vergleicht zwei Strings "logisch" mit <see cref="M:OnUtils.WinApi.LogicStringCompare.CompareLogical(System.String,System.String)"/>.
 </summary>
</member><member name="P:OnUtils.CommonData.Color.A">
	<summary>
 Alpha
 </summary>
</member><member name="P:OnUtils.CommonData.Color.R">
	<summary>
 Alpha
 </summary>
</member><member name="P:OnUtils.CommonData.Color.G">
	<summary>
 Alpha
 </summary>
</member><member name="P:OnUtils.CommonData.Color.B">
	<summary>
 Alpha
 </summary>
</member><member name="M:OnUtils.CommonData.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewA">Der Alpha-Kanal.</param>
	<param name="NewR">Der Rot-Anteil.</param>
	<param name="NewG">Der Grün-Anteil.</param>
	<param name="NewB">Der Blau-Anteil.</param>
</member><member name="M:OnUtils.CommonData.Color.#ctor(System.UInt32)">
	<summary>
 Konstruktor.
 </summary>
	<param name="Argb">Die Farbwerte als Vorzeichenlose 32-Bit Ganzzahl. Die 8 höchstwertigen Bits beinhalten den Alphakanal, die 8 niederwertigsten den Blauanteil.</param>
</member><member name="M:OnUtils.CommonData.Color.ToFormsColor">
	<summary>
 Gibt eine <see cref="T:System.Drawing.Color"/> mit den gleichen Farbwerten zurück.
 </summary>
</member><member name="M:OnUtils.CommonData.Color.ToWpfColor">
	<summary>
 Gibt eine <see cref="T:System.Windows.Media.Color"/> mit den gleichen Farbwerten zurück.
 </summary>
</member><member name="T:OnUtils.CommonData.Color">
	<summary>
 Eine Kombination von 3 Farbwerten (Rot, Grün und Blau) und einem Alphakanal, der die Transparenz angibt.
 Bei Bedarf kann mit <see cref="M:OnUtils.CommonData.Color.ToFormsColor"/> und <see cref="M:OnUtils.CommonData.Color.ToWpfColor"/> konvertiert werden.
 </summary>
</member><member name="T:OnUtils.Wpf.Converters.MultiConverter">
	<summary>
 Führt alle enthaltenen Konvertierungen der Reihe nach durch.
 Zurückkonvertieren ist ebenfalls möglich.
 </summary>
</member><member name="T:OnUtils.Wpf.InvalidDependencyException">
	<summary>
 Wird ausgelöst, wenn in einem <see cref="T:OnUtils.Wpf.ViewModelBase`1"/> ein <see cref="T:OnUtils.Wpf.CommandDependencyAttribute"/> auf eine ungültige Property angewendet wird.
 </summary>
</member><member name="T:OnUtils.NopeException">
	<summary>
 Wird verwendet, um unmögliche Zustände zu behandeln. Beispielsweise ein Select Case, das eigentlich alle möglichen Werte abdeckt, könnte im Else-Zweig eine NopeException auslösen, damit im Falle eines Bugs keine ungültigen Zustände auftreten und der Programmierer auf den Bug aufmerksam wird.
 </summary>
</member><member name="P:OnUtils.BigRational.Numerator">
	<summary>
 Der Zähler des Bruches.
 </summary>
</member><member name="P:OnUtils.BigRational.Denominator">
	<summary>
 Der Nenner des Bruches.
 </summary>
</member><member name="P:OnUtils.BigRational.Value">
	<summary>
 Der Wert des Bruches als Gleitkommazahl.
 </summary>
</member><member name="P:OnUtils.BigRational.IsInfinity">
	<summary>
 Gibt an, ob der Wert des Bruches als Unendlich definiert ist, also ob der Zähler ungleich 0 und der Nenner 0 ist.
 </summary>
</member><member name="P:OnUtils.BigRational.IsSingularity">
	<summary>
 Gibt an, ob der Wert des Bruches als Singularität (auch Lücke genannt) definiert ist, also ob Zähler und Nenner 0 sind.
 </summary>
</member><member name="P:OnUtils.BigRational.IsNegative">
	<summary>
 Gibt an, ob der Wert des Bruches negativ ist, also ob entweder der Zähler oder der Nenner negativ ist.
 </summary>
</member><member name="M:OnUtils.BigRational.#ctor(System.Int32)">
	<summary>
 Der Wert des Bruches entspricht dem Wert des angegebenen Zählers. Der Nenner wird auf 1 gesetzt.
 </summary>
	<param name="NewNumerator"><see cref="P:OnUtils.BigRational.Numerator"/></param>
</member><member name="M:OnUtils.BigRational.#ctor(System.Numerics.BigInteger)">
	<summary>
 Der Wert des Bruches entspricht dem Wert des angegebenen Zählers. Der Nenner wird auf 1 gesetzt.
 </summary>
	<param name="NewNumerator"><see cref="P:OnUtils.BigRational.Numerator"/></param>
</member><member name="M:OnUtils.BigRational.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewNumerator"><see cref="P:OnUtils.BigRational.Numerator"/></param>
	<param name="NewDenominator"><see cref="P:OnUtils.BigRational.Denominator"/></param>
</member><member name="M:OnUtils.BigRational.#ctor(System.Double)">
	<summary>
 Erstellt einen Bruch aus der angegebenen Gleitkommazahl.
 Dabei wird die Gleitkommazahl so lange mit 10 multipliziert, bis der rationale Anteil entfällt.
 Der Nenner wird auf 10^n gesetzt, wobei n die Anzahl an Multiplikationen aus dem ersten Schritt angibt.
 Unter Umständen kann der exakte Wert nicht reproduziert werden, da durch das wiederholte Multiplizieren mit 10 Rundungsfehler auftreten.
 <see cref="P:OnUtils.BigRational.Value"/> ist in solchen Fällen nicht <paramref name="Value"/>, sondern der Wert der sich aus der Division von Zähler und Nenner ergibt.
 </summary>
	<param name="Value">Der Wert, aus dem der Bruch erstellt wird.</param>
</member><member name="M:OnUtils.BigRational.Normalize">
	<summary>
 Gibt einen neuen Bruch mit dem gleichen Wert zurück, dessen Nenner jedenfalls positiv ist und dessen Zähler und Nenner so weit wie möglich gekürzt sind.
 Beispiel: New Fraction(-20, -10).Normalized() -&gt; {2, 1}
 </summary>
</member><member name="M:OnUtils.BigRational.Reziprocal">
	<summary>
 Gibt den Reziprokenbruch dieses Bruches zurück.
 </summary>
</member><member name="M:OnUtils.BigRational.ToString">
	<summary>
 Gibt einen String im Format "Zähler/Nenner" zurück.
 </summary>
</member><member name="M:OnUtils.BigRational.op_Addition(OnUtils.BigRational,OnUtils.BigRational)">
	<summary>
 Addiert die beiden Brüche.
 Wenn die Nenner der beiden Brüche gleich sind, werden die Zähler direkt addiert.
 Ansonsten werden die Brüche um den jeweils anderen Nenner erweitert und anschließend addiert.
 </summary>
	<param name="Left">Der erste Bruch.</param>
	<param name="Right">Der zweite Bruch.</param>
</member><member name="M:OnUtils.BigRational.op_Subtraction(OnUtils.BigRational,OnUtils.BigRational)">
	<summary>
 Subtrahiert die beiden Brüche.
 Wenn die Nenner der beiden Brüche gleich sind, werden die Zähler direkt subtrahiert.
 Ansonsten werden die Brüche um den jeweils anderen Nenner erweitert und anschließend subtrahiert.
 </summary>
	<param name="Left">Der erste Bruch.</param>
	<param name="Right">Der zweite Bruch.</param>
</member><member name="M:OnUtils.BigRational.op_Multiply(OnUtils.BigRational,OnUtils.BigRational)">
	<summary>
 Mutipliziert die beiden Brüche indem die beiden Zähler und Nenner miteinander mutipliziert werden.
 </summary>
	<param name="Left">Der erste Bruch.</param>
	<param name="Right">Der zweite Bruch.</param>
</member><member name="M:OnUtils.BigRational.op_Division(OnUtils.BigRational,OnUtils.BigRational)">
	<summary>
 Dividiert die beiden Brüche indem der Zähler des ersten Bruches mit dem Nenner des zweiten Bruches und umgekehrt multipliziert wird.
 </summary>
	<param name="Left">Der erste Bruch.</param>
	<param name="Right">Der zweite Bruch.</param>
</member><member name="M:OnUtils.BigRational.op_Equality(OnUtils.BigRational,OnUtils.BigRational)">
	<summary>
 Gibt True zurück, wenn die Werte der beiden Brüche gleich sind. Wenn die nenner der beiden Brüche 0 sind, sind die Brüche unabhängig von ihren Zählern als gleich zu betrachten.
 </summary>
	<param name="Left">Der erste Bruch.</param>
	<param name="Right">Der zweite Bruch.</param>
</member><member name="M:OnUtils.BigRational.op_Inequality(OnUtils.BigRational,OnUtils.BigRational)">
	<summary>
 Gibt True zurück, wenn die Werte der beiden Brüche unterschiedlich sind. Wenn die nenner der beiden Brüche 0 sind, sind die Brüche unabhängig von ihren Zählern als gleich zu betrachten.
 </summary>
	<param name="Left">Der erste Bruch.</param>
	<param name="Right">Der zweite Bruch.</param>
</member><member name="M:OnUtils.BigRational.op_Exponent(OnUtils.BigRational,System.Int32)">
	<summary>
 Potenziert den Bruch mit dem angegebenen Exponent, indem Zähler und Nenner mit der Zahl potenziert werden.
 </summary>
	<param name="Left">Der zu potenzierende Bruch.</param>
	<param name="Right">Der Exponent.</param>
</member><member name="M:OnUtils.BigRational.Parse(System.String)">
	<summary>
 Konvertiert einen String im Format "Zähler/Nenner" in einen Bruch.
 </summary>
	<param name="Source">Der String, der geparst wird.</param>
	<exception cref="T:System.FormatException">Der String enthält nicht genau einen Schrägstrich oder mindestens ein Teil kann nicht zu <see cref="T:System.Int32"/> konvertiert werden.</exception>
</member><member name="P:OnUtils.BigRational.Zero">
	<summary>
 0 / 1
 </summary>
</member><member name="P:OnUtils.BigRational.One">
	<summary>
 1 / 1
 </summary>
</member><member name="P:OnUtils.BigRational.Infinity">
	<summary>
 1 / 0
 </summary>
</member><member name="P:OnUtils.BigRational.Singularity">
	<summary>
 0 / 0
 </summary>
</member><member name="M:OnUtils.BigRational.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
	<summary>
 Gibt den größten gemeinsamen Teiler der beiden Zahlen zurück.
 Das Vorzeichen negativer Zahlen wird umgekehrt.
 </summary>
</member><member name="T:OnUtils.BigRational">
	<summary>
 Stellt eine Rationale Zahl (Bruch) dar, die aus einem ganzzahligen Zähler und Nenner besteht.
 </summary>
</member><member name="P:OnUtils.Results.IResult.Success">
	<summary>
 True, wenn der Vorgang erfolgreich war, andernfalls False.
 </summary>
</member><member name="T:OnUtils.Results.IResult">
	<summary>
 Beschreibt ein Ergebnis, welches nur eine Angabe über den Erfolg eines Vorgangs einthält..
 </summary>
</member><member name="E:OnUtils.Streams.DataBuffer`1.BlockReceived">
	<summary>
 Wird ausgelöst, wenn ein vollständiger Block an Daten vorhanden ist bzw. wenn ein Delimiter empfangen wurde.
 </summary>
</member><member name="P:OnUtils.Streams.DataBuffer`1.Source">
	<summary>
 Die Datenquelle des Puffers.
 </summary>
</member><member name="P:OnUtils.Streams.DataBuffer`1.DelimiterData">
	<summary>
 Die Abfolge an Daten, die zwischen auszuwertenden Daten empfangen wird.
 </summary>
</member><member name="M:OnUtils.Streams.DataBuffer`1.#ctor(OnUtils.Streams.IDataBufferSource{`0},System.Collections.Generic.IEnumerable{`0})">
	<summary>
 Konstruktor.
 </summary>
</member><member name="M:OnUtils.Streams.DataBuffer`1.Flush">
	<summary>
 Löst das <see cref="E:OnUtils.Streams.DataBuffer`1.BlockReceived"/>-Event für die aktuell gepufferten Daten aus, auch wenn noch kein Delimiter empfangen wurde.
 </summary>
</member><member name="T:OnUtils.Streams.DataBuffer`1">
	<summary>
 Puffert Daten und löst ein Event aus, wenn ein vollständiger Block vorhanden ist.
 </summary>
	<typeparam name="T">Der Typ der Daten.</typeparam>
</member><member name="T:OnUtils.Wpf.DefaultSelectedBehavior">
	<summary>
 Stellt das Verhalten dar, dass ein Steuerelement beim Laden den Fokus erhält.
 </summary>
</member><member name="T:OnUtils.Wpf.Converters.ObjectToVisibilityConverter">
	<summary>
 Konvertiert zu <see cref="F:System.Windows.Visibility.Collapsed"/>, wenn das Objekt null/Nothing ist, andernfalls zu <see cref="F:System.Windows.Visibility.Visible"/>.
 Funktioniert nicht mit Wertetypen, außer mit Boolean (True = Visible, False = Collapsed).
 </summary>
</member><member name="T:OnUtils.Wpf.Converters.StringToBooleanConverter">
	<summary>
 Konvertiert zu <see cref="T:System.Boolean"/>, wenn der String leer oder null/Nothing ist, andernfalls zu <see cref="T:System.Boolean"/>.
 </summary>
</member><member name="M:OnUtils.DelegateComparison`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewComparison">Die Funktion, die zwei <see cref="T"/>-Objekte vergleicht und True zurückgibt, wenn diese als gleich zu betrachten sind.</param>
	<param name="NewHashCodeFunction">Eine Funktion, die einen Hashcode für das angegebene Objekt zurückgibt. Wird null angegeben, wird automatisch die GetHashCode-Funktion von T aufgerufen.</param>
</member><member name="M:OnUtils.DelegateComparison`1.IEqualityComparer_T_Equals(`0,`0)">
	<summary>
 Siehe <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/>.
 </summary>
</member><member name="M:OnUtils.DelegateComparison`1.IEqualityComparer_T_GetHashCode(`0)">
	<summary>
 Siehe <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/>.
 </summary>
</member><member name="T:OnUtils.DelegateComparison`1">
	<summary>
 Eine Klasse, die <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementiert und den Vergleich durch Aufrufen eines Delegaten ausführt.
 Die für den Delegaten für <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/> angegebene Funktion sollte die <see cref="M:System.Object.GetHashCode"/>-Funktion des als Parameter übergebenen Objektes aurfufen.
 </summary>
</member><member name="T:OnUtils.EmptyEnumerator`1">
	<summary>
 Ein Enumerator, der eine leere Auflistung repräsentiert.
 </summary>
</member><member name="T:OnUtils.Streams.EndOfStreamException">
	<summary>
 Wird ausgelöst, wenn das Ende des Streams vorzeitig erreicht wurde, oder wenn der Stream bereits zuende gelesen wurde.
 </summary>
</member><member name="P:OnUtils.Wpf.SourceItemMovedEventArgs.OldIndex">
	<summary>
 Der alte Index des Elementes.
 </summary>
</member><member name="P:OnUtils.Wpf.SourceItemMovedEventArgs.NewIndex">
	<summary>
 Der neue Index des Elementes.
 </summary>
</member><member name="M:OnUtils.Wpf.SourceItemMovedEventArgs.#ctor(System.Int32,System.Int32)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewOldIndex"><see cref="P:OnUtils.Wpf.SourceItemMovedEventArgs.OldIndex"/></param>
	<param name="NewNewIndex"><see cref="P:OnUtils.Wpf.SourceItemMovedEventArgs.NewIndex"/></param>
</member><member name="T:OnUtils.Wpf.SourceItemMovedEventArgs">
	<summary>
 Wird von <see cref="T:OnUtils.Wpf.IViewModelCollectionSource`1"/> ausgelöst, wenn ein Element in der Datenquelle verschoben wurde.
 </summary>
</member><member name="M:OnUtils.Emit.Macros.Macros.GetType(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Legt ein <see cref="T:System.Type"/>-Objekt auf dem Auswertungsstapel ab, das den angegebenen, zur Laufzeit des erstellenden Codes bekannten Type <param name="T"/> darstellt.
 </summary>
	<param name="T">Der zu verwendende Type.</param>
</member><member name="M:OnUtils.Emit.Macros.Macros.DirectCast(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Castet das Objekt auf dem Auswertungsstapel zu einem anderen Typ durch und beachtet, ob es sich um einen Referenz- oder Wertetyp handelt.
 Entspricht DirectCast() in Visual Basic und dem as-Operator in C#.
 Bei Object wird ein Aufruf an <see cref="T:System.Runtime.CompilerServices.RuntimeHelpers"/>.GetObjectValue(Object) verwendet.
 Bei Wertetypen wird der OpCode unbox_any verwendet.
 Bei Referenztypen wird der OpCode castclass verwendet.
 </summary>
	<param name="TargetType">Der Typ, zu den gecastet werden soll.</param>
</member><member name="M:OnUtils.Emit.Macros.Macros.CompareEquality(System.Reflection.Emit.ILGenerator)">
	<summary>
 Vergleicht die obersten beiden Werte auf dem Auswertungsstapel und beachtet die Art des Typs.
 Legt True auf den Auswertungsstapel, wenn die Werte als gleich zu betrachten sind, andernfalls False.
 Wenn TypeOfValues nicht angegeben wird, wird ein Aufruf an Object.Equals(Object, Object) verwendet.
 </summary>
</member><member name="M:OnUtils.Emit.Macros.Macros.CompareEquality(System.Reflection.Emit.ILGenerator,System.Type)">
	<summary>
 Vergleicht die obersten beiden Werte auf dem Auswertungsstapel und beachtet die Art des Typs.
 Legt True auf den Auswertungsstapel, wenn die Werte als gleich zu betrachten sind, andernfalls False.
 Ist TypeOfValues Nothing, wird ein Aufruf an <see cref="T:System.Object"/>.Equals(Object, Object) verwendet.
 Bei Wertetypen wird versucht, einen passenden Operator op_Equality (z.B. <see cref="M:System.Drawing.Color.op_Equality(System.Drawing.Color,System.Drawing.Color)"/>) zu finden. Wird dieser nicht gefunden, wird <see cref="T:System.Object"/>.Equals(Object, Object) verwendet. Es ist zu beachten, dass dabei Boxing verwendet wird. Dazu wird eine lokale Variable des angegebenen Typs deklariert. Diese Variable wird wiederverwendet, wenn CompareEquality mit dem gleichen Typ erneut aufgerufen wird.
 Bei Interfaces, Klassen (nicht String) und Object, wird der OpCode <see cref="F:System.Reflection.Emit.OpCodes.Ceq"/> verwendet.
 Bei String wird <see cref="T:System.String"/>.Compare(String, String) verwendet und das Ergebnis mit auf Gleichheit mit 0 geprüft.
 </summary>
	<param name="TypeOfValues">Der Typ der zu vergleichenden Werte.</param>
</member><member name="M:OnUtils.Emit.Macros.Macros.EmitEvent(System.Reflection.Emit.TypeBuilder,OnUtils.Emit.AccessModifiers,System.Boolean,System.String,System.Type)">
	<summary>
 Erstellt alle nötigen Member für ein Event. Es wird die standard-Namenskonvention von .Net verwendet.
 </summary>
	<param name="Target">Der Typ, in dem das Event und die dazugehörigen Member deklariert werden.</param>
	<param name="AccessModifiers">Gibt den Sichtbarkeitsbereich des Events an.</param>
	<param name="IsStatic">Gibt an, ob es sich um ein statisches Event handelt.</param>
	<param name="EventName">Gibt den Namen des Events an.</param>
	<param name="DelegateType">Gibt den Delegat-Typ des Events an. Muss von <see cref="T:System.EventHandler`1"/> erben.</param>
</member><member name="T:OnUtils.Emit.Macros.Macros">
	<summary>
 Beinhaltet Extension-Methoden für einige Klassen im <see cref="N:System.Reflection.Emit"/>-Namespace.
 </summary>
</member><member name="E:OnUtils.Wpf.ViewModelCollection`2.ItemCreating">
	<summary>
 Wird ausgelöst, wenn der Liste ein neues Objekt hinzugefügt wird und dafür ein ViewModel erstellt werden muss.
 Dieses Event muss mindestens ein Mal behandelt werden und die <see cref="P:OnUtils.Wpf.ViewModelCollectionItemCreatingEventArgs`2.ViewModel"/>-Property muss auf ein ViewModel für das übergebene Objekt festgelegt werden.
 Erstellen Sie immer eine neue Instanz des ViewModels. Das Wiederverwenden einer ViewModel-Instanz kann zu undefiniertem Verhalten führen.
 </summary>
</member><member name="E:OnUtils.Wpf.ViewModelCollection`2.ItemDisposing">
	<summary>
 Wird ausgelöst, wenn ein Item und das dazugehörige ViewModel verworfen werden.
 Entfernen Sie im hier z.B. EventHandler, die Sie dem im <see cref="E:OnUtils.Wpf.ViewModelCollection`2.ItemCreating"/>-EventHandler erstellten ViewModel hinzugefügt haben.
 </summary>
</member><member name="E:OnUtils.Wpf.ViewModelCollection`2.ItemsChanged">
	<summary>
 Wird ausgelöst, nachdem sich die Auflistung geändert hat.
 </summary>
</member><member name="P:OnUtils.Wpf.ViewModelCollection`2.ViewModels">
	<summary>
 Die Liste der vorhandenen ViewModels. Legen Sie die Datenquelle des Views bzw. Controls auf diese Property fest.
 Verändern Sie diese Liste nicht von außen.
 </summary>
</member><member name="P:OnUtils.Wpf.ViewModelCollection`2.Source">
	<summary>
 Die Datenquelle für diese ViewModelCollection.
 </summary>
</member><member name="P:OnUtils.Wpf.ViewModelCollection`2.Count">
	<summary>
 Ruft die Anzahl an Elementen in dieser <see cref="T:OnUtils.Wpf.ViewModelCollection`2"/> ab.
 </summary>
</member><member name="M:OnUtils.Wpf.ViewModelCollection`2.#ctor(OnUtils.Wpf.IViewModelCollectionSource{`0})">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewSource"><see cref="P:OnUtils.Wpf.ViewModelCollection`2.Source"/></param>
</member><member name="M:OnUtils.Wpf.ViewModelCollection`2.SynchronizeWithList(System.Collections.Generic.IEnumerable{`0})">
	<summary>
 Entfernt alle Elemente, die nicht in <paramref name="Items"/> vorhanden sind und fügt Elemente hinzu, die in <paramref name="Items"/> zusätzlich vorhanden sind.
 </summary>
	<param name="Items">Die Liste der Elemente, mit der synchronisiert wird.</param>
</member><member name="M:OnUtils.Wpf.ViewModelCollection`2.FindViewModel(`0)">
	<summary>
 Findet das ViewModel für das angegebene Objekt.
 Wenn kein ViewModel gefunden wurde, wird eine <see cref="T:System.Collections.Generic.KeyNotFoundException"/> ausgelöst.
 </summary>
	<param name="Item">Das Objekt, für das das ViewModel gesucht wird.</param>
</member><member name="M:OnUtils.Wpf.ViewModelCollection`2.FindViewModel(`0,System.Boolean)">
	<summary>
 Findet das ViewModel für das angegebene Objekt.
 Wenn kein ViewModel gefunden wurde, wird eine <see cref="T:System.Collections.Generic.KeyNotFoundException"/> ausgelöst, falls <paramref name="ThrowIfNotFound"/> True ist.
 </summary>
	<param name="Item">Das Objekt, für das das ViewModel gesucht wird.</param>
	<param name="ThrowIfNotFound">Gibt an, ob eine <see cref="T:System.Collections.Generic.KeyNotFoundException"/> ausgelöst wird, wenn das ViewModel nicht gefunden wurde.</param>
</member><member name="T:OnUtils.Wpf.ViewModelCollection`2">
	<summary>
 Stellt eine Liste von Objekten dar und verwaltet zusätzlich die ViewModels für diese Objekte.
 </summary>
	<typeparam name="TItem">Der Typ der Objekte, die diese Liste fasst.</typeparam>
	<typeparam name="TViewModel">Der Typ der ViewModels für die Objekte.</typeparam>
</member><member name="P:OnUtils.CommonData.RectangleI.X">
	<summary>
 Die X-Koordinate der linken oberen Ecke des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleI.Y">
	<summary>
 Die Y-Koordinate der linken oberen Ecke des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleI.Width">
	<summary>
 Die Breite des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleI.Height">
	<summary>
 Die Höhe des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleI.Left">
	<summary>
 Die X-Position des linken Randes des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleI.Top">
	<summary>
 Die Y-Position des oberen Randes des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleI.Right">
	<summary>
 Die X-Position des rechten Randes des Rechtecks.
 </summary>
</member><member name="P:OnUtils.CommonData.RectangleI.Bottom">
	<summary>
 Die Y-Position des unteren Randes des Rechtecks.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Konstruktor.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleI.Contains(System.Int32,System.Int32)">
	<summary>
 Prüft, ob die angegebenen Koordinaten innerhalb dieses Rechtecks liegen.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleI.Contains(OnUtils.CommonData.RectangleI)">
	<summary>
 Prüft, ob das angegebene Rechteck vollständig innerhalb dieses Rechtecks liegt.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleI.Intersect(OnUtils.CommonData.RectangleI,OnUtils.CommonData.RectangleI)">
	<summary>
 Gibt den von den beiden angegebenen Rechtecken eingeschlossenen Bereich zurück.
 Wenn sich die Rechtecke nicht schneiden, wird ein leeres <see cref="T:OnUtils.CommonData.RectangleI"/> zurückgegeben.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleI.Union(OnUtils.CommonData.RectangleI,OnUtils.CommonData.RectangleI)">
	<summary>
 Gibt ein Rechteck zurück, das die beiden angegebenen Rechtecke umschließt.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleI.ToFormsRectangle">
	<summary>
 Konvertiert die Koordinaten und Größen zu Single und gibt ein <see cref="T:System.Drawing.RectangleF"/> zurück.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleI.ToWpfInt32Rect">
	<summary>
 Gibt ein <see cref="T:System.Windows.Rect"/> mit den Werten dieses Rechtecks, zur Verwendung in WPF, zurück.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleI.op_Equality(OnUtils.CommonData.RectangleI,OnUtils.CommonData.RectangleI)">
	<summary>
 Prüft, ob die beiden Rechtecke die selbe Position und Größe besitzen.
 </summary>
</member><member name="M:OnUtils.CommonData.RectangleI.op_Inequality(OnUtils.CommonData.RectangleI,OnUtils.CommonData.RectangleI)">
	<summary>
 Prüft, ob die beiden Rechtecke eine unterschiedliche Position oder Größe besitzen.
 </summary>
</member><member name="T:OnUtils.CommonData.RectangleI">
	<summary>
 Speichert einen Satz von vier Ganzzahlen, die die Position und Größe eines Rechtecks angeben.
 </summary>
</member><member name="M:OnUtils.Extensions.ListExtensions.Insert``1(``0[],``0[],System.Int32)">
	<summary>
 Kopiert alle Elemente aus <paramref name="Other"/> in dieses Array, beginnend bei Index <paramref name="TargetIndex"/>.
 </summary>
	<param name="Other">Das Array aus dem die Elemente kopiert werden.</param>
	<param name="TargetIndex">Der Index, an dem begonnen wird, die Elemente in das Ziel-Array zu schreiben.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.SortLogically(System.String[])">
	<summary>
 Sortiert das Array "logisch" mit <see cref="T:OnUtils.LogicSortComparer"/>.
 </summary>
</member><member name="M:OnUtils.Extensions.ListExtensions.Select``2(``0[],System.Func{``0,``1})">
	<summary>
 Konvertiert alle Elemente im Array von <paramref name="TIn"/> zu <paramref name="TOut"/>, unter Verwendung der Konvertierungsfunktion <paramref name="Selector"/>.
 Funktioniert wie <see cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>, ist aber optimiert für Arrays.
 </summary>
	<typeparam name="TIn">Der Quelltyp.</typeparam>
	<typeparam name="TOut">Der Zieltyp.</typeparam>
	<param name="Selector">Eine Funktion, die das Objekt zurückgibt, das an der Stelle des übergebenen Objektes im Array abgelegt wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.Select``2(``0[],System.Func{``0,System.Int32,``1})">
	<summary>
 Konvertiert alle Elemente im Array von <paramref name="TIn"/> zu <paramref name="TOut"/>, unter Verwendung der Konvertierungsfunktion <paramref name="Selector"/>.
 Funktioniert wie <see cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>, ist aber optimiert für Arrays und übergibt den Index des Elementes als Integer an die Konvertierungsfunktion.
 </summary>
	<typeparam name="TIn">Der Quelltyp.</typeparam>
	<typeparam name="TOut">Der Zieltyp.</typeparam>
	<param name="Selector">Eine Funktion, die das Objekt zurückgibt, das an der Stelle des übergebenen Objektes im Array abgelegt wird. Der erste Parameter ist das ursprüngliche Element, der zweite Parameter ist der Index des Elements.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.Permutate``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Gibt alle Permutationen dieser Auflistung zurück.
 </summary>
</member><member name="M:OnUtils.Extensions.ListExtensions.SubSequence``1(``0[],System.Int32,System.Int32)">
	<summary>
 Gibt ein Array zurück, das <paramref name="Length"/> Elemente dieses Arrays, beginnend bei <paramref name="StartIndex"/>, enthält.
 </summary>
	<param name="StartIndex">Der Index des ersten Elementes im Quell-Array.</param>
	<param name="Length">Die Anzahl der zurückgegebenen Elemente.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.SubSequence``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
	<summary>
 Gibt eine Auflistung zurück, die <paramref name="Length"/> Elemente dieser Auflistung, beginnend bei <paramref name="StartIndex"/>, enthält.
 </summary>
	<param name="StartIndex">Der Index des ersten Elementes in der Quell-Auflistung.</param>
	<param name="Length">Die Anzahl der zurückgegebenen Elemente.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.IndexOfFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
	<summary>
 Gibt den Index des ersten Elementes in der Liste zurück, für das die Prädikatsfunktion True zurückgibt.
 Gibt -1 zurück, wenn die Prädikatfunktion für keines der Elemente True zurückgegeben hat.
 </summary>
	<param name="Predicate">Die Prädikatsfunktion.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.IndexOfFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
	<summary>
 Gibt den Index des ersten Elementes in der Liste zurück, für das die Prädikatsfunktion True zurückgibt.
 Gibt -1 zurück, wenn die Prädikatfunktion für keines der Elemente True zurückgegeben hat.
 </summary>
	<param name="Predicate">Die Prädikatsfunktion.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.FirstIndexOfItem``1(System.Collections.Generic.IEnumerable{``0},``0)">
	<summary>
 Gibt den Index von <paramref name="Item"/> in dieser Auflistung zurück.
 T muss <see cref="T:System.IEquatable`1"/> implementieren.
 Falls <paramref name="Item"/> mehrmals in dieser Auflistung vorkommt, wird der erste gefundene Index zurückgegeben.
 Falls <paramref name="Item"/> nicht in dieser Auflistung vorkommt, wird -1 zurückgegeben.
 </summary>
	<param name="Item">Das Element, dessen Index zurückgegeben wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.FirstIndexOfItem``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,System.Boolean})">
	<summary>
 Gibt den Index von <paramref name="Item"/> in dieser Auflistung zurück.
 T muss <see cref="T:System.IEquatable`1"/> implementieren.
 Falls <paramref name="Item"/> mehrmals in dieser Auflistung vorkommt, wird der erste gefundene Index zurückgegeben.
 Falls <paramref name="Item"/> nicht in dieser Auflistung vorkommt, wird -1 zurückgegeben.
 </summary>
	<param name="Item">Das Element, dessen Index zurückgegeben wird.</param>
	<param name="Comparator">Vergleicht zwei Elemente und gibt True zurück, wenn sie als gleich zu betrachten sind, andernfalls False.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.AllIndicesOf(System.String,System.String)">
	<summary>
 Gibt eine Liste von Indices, an denen <paramref name="Character"/> im String vorkommt, zurück.
 Es wird die <see cref="F:System.StringComparison.CurrentCulture"/> verwendet.
 </summary>
	<param name="SubString">Der Unterstring, nach dem gesucht wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.AllIndicesOf(System.String,System.String,System.StringComparison)">
	<summary>
 Gibt eine Liste von Indices, an denen <paramref name="Character"/> im String vorkommt, zurück.
 Es wird die angegebene Vergleichsmethode verwendet.
 </summary>
	<param name="SubString">Der Unterstring, nach dem gesucht wird.</param>
	<param name="Comparison">Die Zeichenfolgenvergleichsmethode, die verwendet wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.AllIndicesOf(System.String,System.String,System.Int32)">
	<summary>
 Gibt eine Liste von Indices, an denen <paramref name="Character"/> im String vorkommt, zurück, beginnend bei <paramref name="StartIndex"/>.
 Es wird die <see cref="F:System.StringComparison.CurrentCulture"/> verwendet.
 </summary>
	<param name="SubString">Der Unterstring, nach dem gesucht wird.</param>
	<param name="StartIndex">Der erste Index, an dem begonnen wird, zu suchen.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.AllIndicesOf(System.String,System.String,System.Int32,System.StringComparison)">
	<summary>
 Gibt eine Liste von Indices, an denen <paramref name="Character"/> im String vorkommt, zurück, beginnend bei <paramref name="StartIndex"/>.
 Es wird die angegebene Vergleichsmethode verwendet.
 </summary>
	<param name="SubString">Der Unterstring, nach dem gesucht wird.</param>
	<param name="StartIndex">Der erste Index, an dem begonnen wird, zu suchen.</param>
	<param name="Comparison">Die Zeichenfolgenvergleichsmethode, die verwendet wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.AllIndicesOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Gibt eine Liste von Indices, an denen die <paramref name="SubSequence"/>-Sequenzen in der <paramref name="Target"/>-Sequenz beginnen, zurück.
 </summary>
	<param name="SubSequence">Die Unter-Sequenz, deren Indices in der Sequenz gesucht werden.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.AllIndicesOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
	<summary>
 Gibt eine Liste von Indices, an denen die <paramref name="SubSequence"/>-Sequenzen in der <paramref name="Target"/>-Sequenz beginnen, zurück, beginnend bei <paramref name="StartIndex"/>.
 </summary>
	<param name="SubSequence">Die Unter-Sequenz, deren Indices in der Sequenz gesucht werden.</param>
	<param name="StartIndex">Der Index, von dem an gesucht wird. Dieser Index kann in der zurückgegebenen Liste enthalten sein.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.AllIndicesOf``1(``0[],``0[])">
	<summary>
 Gibt eine Liste von Indices, an denen die <paramref name="SubSequence"/>-Sequenzen in der <paramref name="Target"/>-Sequenz beginnen, zurück.
 </summary>
	<param name="SubSequence">Die Unter-Sequenz, deren Indices in der Sequenz gesucht werden.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.AllIndicesOf``1(``0[],``0[],System.Int32)">
	<summary>
 Gibt eine Liste von Indices, an denen die <paramref name="SubSequence"/>-Sequenzen in der <paramref name="Target"/>-Sequenz beginnen, zurück, beginnend bei <paramref name="StartIndex"/>.
 </summary>
	<param name="SubSequence">Die Unter-Sequenz, deren Indices in der Sequenz gesucht werden.</param>
	<param name="StartIndex">Der Index, von dem an gesucht wird. Dieser Index kann in der zurückgegebenen Liste enthalten sein.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.ConcatAll``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
	<summary>
 Gibt eine Liste zurück, dass alle Elemente aller in dieser Liste enthaltenen Listen enthält.
 </summary>
	<param name="Target">Die einzelnen Listen, die miteinander verbunden werden sollen.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
	<summary>
 Gibt eine Liste zurück, die mit <paramref name="Item"/> beginnt und anschließend die bestehenden Elemente enthält.
 </summary>
	<param name="Item">Das Element, das am Beginn eingefügt wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
	<summary>
 Gibt eine Liste zurück, die mit den bestehenden Elementen beginnt und anschließend <paramref name="Item"/> enthält.
 </summary>
	<param name="Item">Das Element, das am Ende angehängt wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.Join``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Verknüpft alle Auflistungen in dieser Auflistung mit <paramref name="Concatenator"/> dazwischen.
 Enthält diese Auflistung 0 Elemente, wird ein leeres Array von T zurückgegeben.
 Enthält diese Auflistung 1 Element, wird nur dieses eine Element zurückgegeben.
 Beispiel: {{1, 2}, {3, 4}, {5, 6}}.Join({7, 8}) -&gt; {1, 2, 7, 8, 3, 4, 7, 8, 5, 6}
 </summary>
	<param name="Concatenator">Die Elemente zwischen den Elementen dieser Auflistung.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.SliceToSize``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
	<summary>
 Teilt diese Liste in kleine Listen mit der Größe <paramref name="SliceSize"/> auf.
 Ist diese Liste leer oder null, wird eine leere Liste zurückgegeben.
 Das letzte Elemente in der zurückgegebenen Liste enthält weniger Elemente als in <paramref name="SliceSize"/> angegeben, wenn die Anzahl an Elementen in dieser Liste nicht ohne Rest durch <paramref name="SliceSize"/> teilbar ist.
 </summary>
	<param name="SliceSize">Die Größe der einzelnen Listen.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">SliceSize ist kleiner als 1.</exception>
</member><member name="M:OnUtils.Extensions.ListExtensions.SliceToSize``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
	<summary>
 Teilt diese Liste in kleine Listen mit der Größe <paramref name="SliceSize"/> auf.
 Ist diese Liste leer oder null, wird eine leere Liste zurückgegeben.
 Wenn <paramref name="SkipRemainder"/> False ist, enthält das letzte Elemente in der zurückgegebenen Liste weniger Elemente als in <paramref name="SliceSize"/> angegeben, wenn die Anzahl an Elementen in dieser Liste nicht ohne Rest durch <paramref name="SliceSize"/> teilbar ist. Ansonsten wird das Element mit weniger Elementen nicht zurückgegeben.
 </summary>
	<param name="SliceSize">Die Größe der einzelnen Listen.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">SliceSize ist kleiner als 1.</exception>
</member><member name="M:OnUtils.Extensions.ListExtensions.SliceToSizeRightAligned``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
	<summary>
 Teilt diese Liste in kleine Listen mit der Größe <paramref name="SliceSize"/> auf.
 Ist diese Liste leer oder null, wird eine leere Liste zurückgegeben.
 Das erste Elemente in der zurückgegebenen Liste enthält weniger Elemente als in <paramref name="SliceSize"/> angegeben, wenn die Anzahl an Elementen in dieser Liste nicht ohne Rest durch <paramref name="SliceSize"/> teilbar ist.
 </summary>
	<param name="SliceSize">Die Größe der einzelnen Listen.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">SliceSize ist kleiner als 1.</exception>
</member><member name="M:OnUtils.Extensions.ListExtensions.SliceToSizeRightAligned``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
	<summary>
 Teilt diese Liste in kleine Listen mit der Größe <paramref name="SliceSize"/> auf.
 Ist diese Liste leer oder null, wird eine leere Liste zurückgegeben.
 Wenn <paramref name="SkipRemainder"/> False ist, enthält das erste Elemente in der zurückgegebenen Liste weniger Elemente als in <paramref name="SliceSize"/> angegeben, wenn die Anzahl an Elementen in dieser Liste nicht ohne Rest durch <paramref name="SliceSize"/> teilbar ist. Ansonsten wird das Element mit weniger Elementen nicht zurückgegeben.
 Ansonsten werden die übrigen Elemente nicht zurückgegeben.
 </summary>
	<param name="SliceSize">Die Größe der einzelnen Listen.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">SliceSize ist kleiner als 1.</exception>
</member><member name="M:OnUtils.Extensions.ListExtensions.SliceToCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
	<summary>
 Teilt diese Liste in <paramref name="NumberOfSlices"/> kleine Listen auf.
 Ist diese Liste leer oder null, wird eine leere Liste zurückgegeben.
 </summary>
	<param name="NumberOfSlices">Die Anzahl an Listen, in die diese Liste aufgeteilt wird.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">SliceSize ist kleiner als 1.</exception>
	<exception cref="T:System.ArgumentException">Die Anzahl an Elementen in dieser Liste kann nicht ohne Rest auf <paramref name="NumberOfSlices"/> aufgeteilt werden.</exception>
</member><member name="M:OnUtils.Extensions.ListExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
	<summary>
 Wendet <see cref="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})"/> auf diese Liste unter der Verwendung der Vergleichsfunktion <paramref name="Comparer"/> an.
 </summary>
	<param name="Comparer">Eine Funktion, die zwei T-Objekte vergleicht und True zurückgibt, wenn diese als gleich zu betrachten sind.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
	<summary>
 Wendet <see cref="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})"/> auf diese Liste unter der Verwendung der Standardvergleichsfunktion für TKey an, indem für jedes Element ein Schlüssel mit <paramref name="KeySelector"/> zum Vergleich verwendet wird.
 </summary>
	<param name="KeySelector">Eine Funktion, die zu einem Element einen Schlüssel zurückgibt.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.Sort``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Sortiert diese Liste. Gibt die sortierte Liste zurück, ohne die ursprüngliche Liste zu verändern.
 </summary>
</member><member name="M:OnUtils.Extensions.ListExtensions.SortDescending``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Sortiert diese Liste in absteigender Reihenfolge. Gibt die sortierte Liste zurück, ohne die ursprüngliche Liste zu verändern.
 </summary>
</member><member name="M:OnUtils.Extensions.ListExtensions.OrderByLogically(System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 Erstellt eine <see cref="T:System.Collections.Generic.List`1"/> aus dieser Liste und sortiert sie "logisch" mit <see cref="T:OnUtils.LogicSortComparer"/>.
 </summary>
</member><member name="M:OnUtils.Extensions.ListExtensions.Count``1(System.Collections.Generic.IEnumerable{``0},``0)">
	<summary>
 Zählt, wie viele <paramref name="Item"/> in dieser Auflistung vorkommen.
 T muss <see cref="T:System.IEquatable`1"/> implementieren.
 </summary>
	<param name="Item">Das Element, dessen Vorkommen in der Auflistung gezählt wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.Count``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,System.Boolean})">
	<summary>
 Zählt mithilfe der angegebenen Vergleichsfunktion, wie viele <paramref name="Item"/> in dieser Auflistung vorkommen.
 </summary>
	<param name="Item">Das Element, dessen Vorkommen in der Auflistung gezählt wird.</param>
	<param name="Comparator">Vergleicht zwei Elemente und gibt True zurück, wenn sie als gleich zu betrachten sind, andernfalls False.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.Reduce``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
	<summary>
 Reduziert eine Liste von Elementen zu einem einzigen Element unter der Verwendung der angegebenen Reduzierungs-Funktion.
 Wenn <paramref name="Target"/> leer ist, wird der Standardwert von T zurückgegeben.
 Wenn <paramref name="Target"/> 1 Element einthält, wird dieses zurückgegeben.
 Für alle weiteren Elemente wird <paramref name="Reducer"/> mit dem bisherigen Zwischenergebnis und dem nächsten Element aufgerufen. Das Ergebnis jedes Aufrufes an <paramref name="Reducer"/> dient zusammen mit dem jeweils nächsten Element als Parameter für den nächsten Aufruf von <paramref name="Reducer"/>.
 Beispiel: {"A", "B", "C"}.Reduce(Function(Left, Right) Left &amp; "X" &amp; Right)
 ergibt: ("A" &amp; "X" &amp; "B") &amp; "X" &amp; "C"
 bzw.: "AXBXC"
 </summary>
	<typeparam name="T">Der Typ der Elemente in der Auflistung.</typeparam>
	<param name="Reducer">Eine Funktion, die zwei Elemente auf eines reduziert.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.Reduce``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
	<summary>
 Reduziert eine Liste von Elementen zu einem einzigen Element unter der Verwendung der angegebenen Reduzierungs-Funktion und einem Ausgangswertes.
 Das Ergebnis kann einen anderen Typ als der Element-Typ der Auflistung haben.
 Wenn <paramref name="Target"/> leer ist, wird <paramref name="InitialValue"/> zurückgegeben.
 Für alle Elemente wird <paramref name="Reducer"/> mit dem bisherigen Zwischenergebnis und dem nächsten Element aufgerufen. Das Ergebnis jedes Aufrufes an <paramref name="Reducer"/> dient zusammen mit dem jeweils nächsten Element als Parameter für den nächsten Aufruf von <paramref name="Reducer"/>.
 Beispiel: {"1", "2", "3"}.Reduce(Of String, Integer)(0, Function(Intermediate, Item) Intermediate + Integer.Parse(Item))
 ergibt: ((0 + 1) + 2) + 3)
 bzw.: 6
 </summary>
	<typeparam name="TItem">Der Typ der Elemente in der Auflistung.</typeparam>
	<typeparam name="TResult">Der Typ des Ausgangswertes.</typeparam>
	<param name="InitialValue">Der Ausgangswert, der mit dem ersten Element verknüpft wird.</param>
	<param name="Reducer">Eine Funktion, die zwei Elemente auf eines reduziert.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.ExceptItem``1(System.Collections.Generic.IEnumerable{``0},``0)">
	<summary>
 Gibt eine Auflistung zurück, die alle Elemente dieser Auflistung enthält, mit Ausnahme des angegebenen Elements.
 </summary>
	<param name="ExcludedItem">Das Element, das nicht in der Liste enthalten ist.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.ExceptItem``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
	<summary>
 Gibt eine Auflistung zurück, die alle Elemente dieser Auflistung enthält, mit Ausnahme des angegebenen Elements.
 </summary>
	<param name="ExcludedItem">Das Element, das nicht in der Liste enthalten ist.</param>
	<param name="Comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> mit dem die Elemente auf Gleichheit geprüft werden.</param>
</member><member name="P:OnUtils.Extensions.ListExtensions.ListGrouping`2.Key">
	<summary>
		<see cref="P:System.Linq.IGrouping`2.Key"/>
	</summary>
</member><member name="P:OnUtils.Extensions.ListExtensions.ListGrouping`2.Items">
	<summary>
 Die Liste von Items, die dieses Grouping beinhaltet.
 </summary>
</member><member name="T:OnUtils.Extensions.ListExtensions.ListGrouping`2">
	<summary>
 Stellt ein <see cref="T:System.Linq.IGrouping`2"/> dar, das eine feste Anzahl an Elementen beinhaltet.
 </summary>
</member><member name="M:OnUtils.Extensions.ListExtensions.OrderedGroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
	<summary>
 Funktioniert wie <see cref="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/> mit folgenden Änderungen:
 Die Gruppierung erfolgt nicht über die gesamte Liste, sondern nur über je den sequenziellen Teil, im dem alle Elemente den selben Key haben.
 Dadurch kann es mehrere Gruppen mit dem selben Key geben.
 Beispiel: OrderedGroupBy({0, 0, 0, 1, 0, 0}, Identity) = {{0, 0, 0}, {1}, {0, 0}}
 </summary>
	<param name="KeySelector">Eine Funktion, die für jedes Element in <paramref name="Target"/> einen Wert zurückgibt, anhand dessen gruppiert wird.</param>
</member><member name="P:OnUtils.Extensions.ListExtensions.SequenceInfoItem`1.Value">
	<summary>
 Das eigentliche Element der Liste.
 </summary>
</member><member name="P:OnUtils.Extensions.ListExtensions.SequenceInfoItem`1.IsFirst">
	<summary>
 Gibt an, ob das Element das erste in der Liste ist.
 </summary>
</member><member name="P:OnUtils.Extensions.ListExtensions.SequenceInfoItem`1.IsLast">
	<summary>
 Gibt an, ob das Element das letzte in der Liste ist.
 </summary>
</member><member name="T:OnUtils.Extensions.ListExtensions.SequenceInfoItem`1">
	<summary>
 Stellt ein Element einer Liste mit Zusatzinformationen dar.
 </summary>
</member><member name="M:OnUtils.Extensions.ListExtensions.SequenceInfo``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Fügt jedem Element in der Liste zusätzliche Informationen (siehe <see cref="T:OnUtils.Extensions.ListExtensions.SequenceInfoItem`1"/>) hinzu.
 </summary>
</member><member name="M:OnUtils.Extensions.ListExtensions.AddRange``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Fügt einer <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> mehrere Elemente hinzu.
 </summary>
	<param name="Items">Die hinzuzufügenden Elemente.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.Synchronize``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
	<summary>
 Entfernt alle Elemente aus dieser Liste, die nicht in <paramref name="Items"/> vorkommen und fügt alle Elemente aus <paramref name="Items"/> hinzu, die nicht in dieser Auflistung vorkommen.
 Die Elemente dieser Liste haben nicht nötigerweise die selbe Reihenfolge wie <paramref name="Items"/>.
 Ziel ist es, die Liste nicht komplett zu leeren und erneut zu füllen, sondern nur die nötigen Änderungen vorzunehmen.
 </summary>
	<param name="Items">Die Elemente, mit denen diese Liste synchronisiert werden soll.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.Synchronize``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},System.Action{``0})">
	<summary>
 Entfernt alle Elemente aus dieser Liste, die nicht in <paramref name="Items"/> vorkommen und fügt alle Elemente aus <paramref name="Items"/> hinzu, die nicht in dieser Auflistung vorkommen.
 Zum Feststellen, ob zwei Elemente als gleich zu betrachten sind, wird die in <paramref name="EqualityComparer"/> angegebene Vergleichs-Funktion verwendet.
 Die Elemente dieser Liste haben nicht nötigerweise die selbe Reihenfolge wie <paramref name="Items"/>.
 Ziel ist es, die Liste nicht komplett zu leeren und erneut zu füllen, sondern nur die nötigen Änderungen vorzunehmen.
 </summary>
	<param name="Items">Die Elemente, mit denen diese Liste synchronisiert werden soll.</param>
	<param name="EqualityComparer">Vergleicht zwei Elemente und gibt True zurück, wenn sie als gleich zu betrachten sind, andernfalls False.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.Synchronize``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Func{``1,``0},System.Action{``0})">
	<summary>
 Entfernt alle Elemente aus dieser Liste, die nicht in <paramref name="Items"/> vorkommen und fügt alle Elemente aus <paramref name="Items"/> hinzu, die nicht in dieser Auflistung vorkommen.
 Zum Feststellen, ob zwei Elemente als gleich zu betrachten sind, wird die in <paramref name="EqualityComparer"/> angegebene Vergleichs-Funktion verwendet.
 Zum Einfügen in die Liste wird die in <paramref name="InsertSelector"/> angegebene Selektor-Funktion verwendet.
 Die Elemente dieser Liste haben nicht nötigerweise die selbe Reihenfolge wie <paramref name="Items"/>.
 Ziel ist es, die Liste nicht komplett zu leeren und erneut zu füllen, sondern nur die nötigen Änderungen vorzunehmen.
 </summary>
	<param name="Items">Die Elemente, mit denen diese Liste synchronisiert werden soll.</param>
	<param name="EqualityComparer">Vergleicht zwei Elemente und gibt True zurück, wenn sie als gleich zu betrachten sind, andernfalls False.</param>
	<param name="InsertSelector">Nimmt ein Objekt aus <paramref name="Items"/> und gibt ein Objekt zurück, das für das übergebene Objekt in diese Liste eingefügt wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.Any(System.Collections.Generic.IEnumerable{System.Boolean})">
	<summary>
 Gibt True zurück, wenn mindestens ein Element in dieser Liste True ist, andernfalls False.
 </summary>
</member><member name="M:OnUtils.Extensions.ListExtensions.All(System.Collections.Generic.IEnumerable{System.Boolean})">
	<summary>
 Gibt True zurück, wenn alle Elemente in dieser Liste True sind, andernfalls False.
 </summary>
</member><member name="M:OnUtils.Extensions.ListExtensions.GetOrNew``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
	<summary>
 Wenn der angegebene Schlüssel in diesem Dictionary vorhanden ist, wird der zugeordnete Wert zurückgegeben.
 Ansonsten wird eine neue Instanz von TValue erstellt, dem Dictionary hinzugefügt und zurückgegeben.
 TValue muss einen Standardkonstruktor besitzen.
 </summary>
	<param name="Key">Der Schlüssel des zusuchenden Wertes.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.GetOrNew``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})">
	<summary>
 Wenn der angegebene Schlüssel in diesem Dictionary vorhanden ist, wird der zugeordnete Wert zurückgegeben.
 Ansonsten wird mithilfe von <paramref name="NewValueConstructor"/> eine neue Instanz von TValue erstellt, dem Dictionary hinzugefügt und zurückgegeben.
 </summary>
	<param name="Key">Der Schlüssel des zusuchenden Wertes.</param>
	<param name="NewValueConstructor">Eine Funktion, die eine neue Instanz von TValue zurückgibt, die verwendet wird, wenn der Schlüssel nicht im Wörterbuch gefunden wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.GetOrNew``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
	<summary>
 Wenn der angegebene Schlüssel in diesem Dictionary vorhanden ist, wird der zugeordnete Wert zurückgegeben.
 Ansonsten wird mithilfe von <paramref name="NewValueConstructor"/> eine neue Instanz von TValue erstellt, dem Dictionary hinzugefügt und zurückgegeben.
 </summary>
	<param name="Key">Der Schlüssel des zusuchenden Wertes.</param>
	<param name="NewValueGetter">Eine Funktion, die eine neue Instanz von TValue zurückgibt, die verwendet wird, wenn der Schlüssel nicht im Wörterbuch gefunden wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.IndexAfter(System.String,System.String)">
	<summary>
 Gibt, wenn vorhanden, den Index nach dem ersten Vorkommen von <paramref name="ContainedString"/> zurück, ansonsten -1.
 </summary>
	<param name="ContainedString">Der String, nach dem gesucht wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.SubstringAfter(System.String,System.String)">
	<summary>
 Gibt den verbleibenden String nach dem ersten Vorkommen von <paramref name="ContainedString"/> bis zum Ende zurück.
 Ist <paramref name="ContainedString"/> nicht im Quellstring vorhanden oder befindet er sich an dessen Ende, wird ein leerer String zurückgegeben.
 </summary>
	<param name="ContainedString">Der String, nach dem gesucht wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.SubstringAfter(System.String,System.String,System.Int32)">
	<summary>
 Gibt den String nach dem ersten Vorkommen von <paramref name="ContainedString"/> mit der angegebenen Länge zurück.
 Ist <paramref name="ContainedString"/> nicht im Quellstring vorhanden oder befindet er sich an dessen Ende, wird ein leerer String zurückgegeben.
 Reicht <paramref name="Length"/> über das Ende des Strings hinaus, wird eine Exception ausgelöst. Siehe <see cref="T:System.String"/>.
 </summary>
	<param name="ContainedString">Der String, nach dem gesucht wird.</param>
</member><member name="M:OnUtils.Extensions.ListExtensions.SubstringBetween(System.String,System.Int32,System.Int32)">
	<summary>
 Gibt den enthaltenen String, beginnend bei <paramref name="StartIndex"/> und endend bei <paramref name="EndIndex"/>, zurück.
 Liegt <paramref name="EndIndex"/> außerhalb des Strings oder vor <paramref name="StartIndex"/>, wird eine <see cref="T:System.ArgumentOutOfRangeException"/> ausgelöst.
 </summary>
	<param name="StartIndex">Der Index des ersten Zeichens des zurückgegebenen Strings.</param>
	<param name="EndIndex">Der Index des letzten Zeichens des zurückgegebenen Strings.</param>
</member><member name="T:OnUtils.Extensions.ListExtensions">
	<summary>
 Beinhaltet erweiterungsmethoden für <see cref="T:System.Array"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/> und ähnliche Auflistungen.
 Enthält auch Erweiterungsmethoden die für Strings (anstelle von IEnumerable(Of Char)) optimiert sind.
 </summary>
</member><member name="P:OnUtils.Streams.BufferDataReceivedEventArgs`1.Data">
	<summary>
 Die bereitgestellten Daten.
 </summary>
</member><member name="M:OnUtils.Streams.BufferDataReceivedEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewData">Die bereitgestellten Daten.</param>
</member><member name="T:OnUtils.Streams.BufferDataReceivedEventArgs`1">
	<summary>
 Enthält die Daten, die <see cref="T:OnUtils.Streams.IDataBufferSource`1"/> bereitgestellt werden..
 </summary>
	<typeparam name="T">Der Typ der Daten.</typeparam>
</member><member name="P:OnUtils.WeakReference`1.Target">
	<summary>
 Ruft das schwach referenzierte Objekt ab oder legt es fest.
 </summary>
</member><member name="T:OnUtils.WeakReference`1">
	<summary>
 Stellt eine streng typisierte Variante von <see cref="T:OnUtils.WeakReference`1"/> dar.
 </summary>
	<typeparam name="T">Der Typ des Objektes, das referenziert wird.</typeparam>
</member><member name="P:OnUtils.Wpf.TextInlines.Empty">
	<summary>
 Ein leeres Array von <see cref="T:System.Windows.Documents.Inline"/>.
 </summary>
</member><member name="P:OnUtils.Wpf.TextInlines.InlineSelector">
	<summary>
 Eine Funktion, die anhand eines übergebenen Objektes eine Auflistung von <see cref="T:System.Windows.Documents.Inline"/>-Objektnen zurückgibt, die das Objekt repräsentieren.
 Die <see cref="M:OnUtils.Wpf.TextInlines.Create(System.Object[])"/>-Funktionen werden dadurch erweitert.
 </summary>
</member><member name="M:OnUtils.Wpf.TextInlines.Create(System.Object[])">
	<summary>
 Gibt eine List von <see cref="T:System.Windows.Documents.Inline"/>-Objekten zurück, die die angegebenen Objekte repräsentieren.
 </summary>
	<param name="Items">Das ParamArray von Objekten.</param>
</member><member name="M:OnUtils.Wpf.TextInlines.Create(System.Collections.Generic.IEnumerable{System.Object})">
	<summary>
 Gibt eine List von <see cref="T:System.Windows.Documents.Inline"/>-Objekten zurück, die die angegebenen Objekte repräsentieren.
 </summary>
	<param name="Items">Die Auflistung von Objekten.</param>
</member><member name="T:OnUtils.Wpf.TextInlines">
	<summary>
 Enthält Hilfsfunktionen zum Erstellen von Inlines für <see cref="T:OnUtils.Wpf.FormatTextBlock"/>.
 </summary>
</member><member name="E:OnUtils.DelayedEvent.Elapsed">
	<summary>
 Wird ausgelöst, sobald die Zeitverzögerung abgelaufen ist.
 </summary>
</member><member name="P:OnUtils.DelayedEvent.DelayMilliseconds">
	<summary>
 Gibt die Zeitverzögerung in Millisekunden an.
 </summary>
</member><member name="P:OnUtils.DelayedEvent.DelegateControl">
	<summary>
 Ein Control, das verwendet wird, um das Auslösen des Events im GUI-Thread durchzuführen.
 Ist diese Eigenschaft Nothing, wird das Event in einem anderen Thread ausgelöst.
 </summary>
</member><member name="P:OnUtils.DelayedEvent.IsWaiting">
	<summary>
 Gibt an, ob die Zeitspanne gerade abläuft.
 </summary>
</member><member name="M:OnUtils.DelayedEvent.Trigger">
	<summary>
 Beginnt das Abwarten der Zeitverzögerung.
 Ist die Zeitverzögerung seit dem letzten Aufruf noch nicht abgelaufen, wird sie zurückgesetzt.
 </summary>
</member><member name="M:OnUtils.DelayedEvent.Cancel">
	<summary>
 Bricht das Abwarten der Zeitverzögerung ab.
 </summary>
</member><member name="T:OnUtils.DelayedEvent">
	<summary>
 Ein Event, welches durch einen Timer verzögert ausgelöst wird.
 </summary>
</member><member name="P:OnUtils.Emit.EmitAssembly.Assembly">
	<summary>
 Die <see cref="T:System.Reflection.Emit.AssemblyBuilder"/>-Instanz, in der das Modul <see cref="P:OnUtils.Emit.EmitAssembly.MainModule"/> definiert ist.
 </summary>
</member><member name="P:OnUtils.Emit.EmitAssembly.MainModule">
	<summary>
 Das Modul, in dem Typen definiert werden.
 </summary>
</member><member name="P:OnUtils.Emit.EmitAssembly.FilePath">
	<summary>
 Der vollständige Pfad zur Datei.
 <example>C:\Directory\File.dll</example>
	</summary>
</member><member name="P:OnUtils.Emit.EmitAssembly.DirectoryPath">
	<summary>
 Der Vollständige Pfad zum Ordner, in dem sich die Datei befindet.
 <example>C:\Directory</example>
	</summary>
</member><member name="P:OnUtils.Emit.EmitAssembly.FileName">
	<summary>
 Der Name der Datei mit Erweiterung, ohne Pfad zum Ordner.
 <example>File.dll</example>
	</summary>
</member><member name="P:OnUtils.Emit.EmitAssembly.FileNameWithoutExtension">
	<summary>
 Der Name der Datei ohne Erweiterung und ohne Pfad zum Ordner.
 <example>File</example>
	</summary>
</member><member name="P:OnUtils.Emit.EmitAssembly.FileExtension">
	<summary>
 Die Erweiterung des Dateinamens.
 <example>.dll</example>
	</summary>
</member><member name="P:OnUtils.Emit.EmitAssembly.IsExecutable">
	<summary>
 Gibt an, ob die Assembly eine ausführbare Datei (.exe) oder eine Klassenbibliothek (.dll) beschreibt.
 Bei ausführbaren Dateien muss ein Einstiegspunkt definiert sein.
 </summary>
</member><member name="P:OnUtils.Emit.EmitAssembly.DefinedTypeBuilders">
	<summary>
 Die in dieser Assembly definierten <see cref="T:System.Reflection.Emit.TypeBuilder"/>-Objekte.
 Enthält nur TypeBuilder, die mit <see cref="T:OnUtils.Emit.EmitAssembly"/>.<see cref="M:OnUtils.Emit.EmitAssembly.DefineType(System.String)"/> definiert wurden.
 </summary>
</member><member name="M:OnUtils.Emit.EmitAssembly.#ctor(System.String)">
	<summary>
 Konstruktor.
 </summary>
	<param name="NewFilePath">Der vollständige Dateipfad, an dem die Assembly abgespeichert wird.</param>
	<exception cref="T:System.ArgumentException">Die Erweiterung ist weder .exe, noch .dll.</exception>
</member><member name="M:OnUtils.Emit.EmitAssembly.DefineType(System.String)">
	<summary>
 Definiert eine öffentliche Klasse <paramref name="Name"/>, die nur von Object erbt.
 </summary>
	<param name="Name">Der Name des neuen Types. Namespaces werden mit Punkt getrennt vorangestellt.</param>
</member><member name="M:OnUtils.Emit.EmitAssembly.DefineType(System.String,System.Reflection.TypeAttributes)">
	<summary>
 Definiert einen dynamischen Typ <paramref name="Name"/>, der nur von Object erbt.
 </summary>
	<param name="Name">Der Name des neuen Types. Namespaces werden mit Punkt getrennt vorangestellt.</param>
	<param name="Attributes">Die TypeAttributes, die den neuen Typ beschreiben.</param>
</member><member name="M:OnUtils.Emit.EmitAssembly.DefineType(System.String,System.Type)">
	<summary>
 Definiert eine öffentliche Klasse <paramref name="Name"/>, die von <paramref name="Parent"/> erbt.
 </summary>
	<param name="Name">Der Name des neuen Types. Namespaces werden mit Punkt getrennt vorangestellt.</param>
	<param name="Parent">Der Typ, von dem der neue Typ erbt.</param>
</member><member name="M:OnUtils.Emit.EmitAssembly.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
	<summary>
 Definiert einen dynamischen Typ <paramref name="Name"/>, der von <paramref name="Parent"/> erbt.
 </summary>
	<param name="Name">Der Name des neuen Types. Namespaces werden mit Punkt getrennt vorangestellt.</param>
	<param name="Attributes">Die TypeAttributes, die den neuen Typ beschreiben.</param>
	<param name="Parent">Der Typ, von dem der neue Typ erbt.</param>
</member><member name="M:OnUtils.Emit.EmitAssembly.DefineType(System.String,System.Type[])">
	<summary>
 Definiert eine öffentliche Klasse <paramref name="Name"/>, die nur von Object erbt und die angegebenen Interfaces implementiert.
 </summary>
	<param name="Name">Der Name des neuen Types. Namespaces werden mit Punkt getrennt vorangestellt.</param>
	<param name="Interfaces">Die Interfaces, die der neue Typ implementiert.</param>
</member><member name="M:OnUtils.Emit.EmitAssembly.DefineType(System.String,System.Reflection.TypeAttributes,System.Type[])">
	<summary>
 Definiert einen dynamischen Typ <paramref name="Name"/>, der nur von Object erbt und die angegebenen Interfaces implementiert.
 </summary>
	<param name="Name">Der Name des neuen Types. Namespaces werden mit Punkt getrennt vorangestellt.</param>
	<param name="Attributes">Die TypeAttributes, die den neuen Typ beschreiben.</param>
	<param name="Interfaces">Die Interfaces, die der neue Typ implementiert.</param>
</member><member name="M:OnUtils.Emit.EmitAssembly.DefineType(System.String,System.Type,System.Type[])">
	<summary>
 Definiert eine öffentliche Klasse <paramref name="Name"/>, die von <paramref name="Parent"/> erbt und die angegebenen Interfaces implementiert.
 </summary>
	<param name="Name">Der Name des neuen Types. Namespaces werden mit Punkt getrennt vorangestellt.</param>
	<param name="Parent">Der Typ, von dem der neue Typ erbt.</param>
	<param name="Interfaces">Die Interfaces, die der neue Typ implementiert.</param>
</member><member name="M:OnUtils.Emit.EmitAssembly.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
	<summary>
 Definiert einen dynamischen Typ <paramref name="Name"/>, der von <paramref name="Parent"/> erbt und die angegebenen Interfaces implementiert.
 </summary>
	<param name="Name">Der Name des neuen Types. Namespaces werden mit Punkt getrennt vorangestellt.</param>
	<param name="Attributes">Die TypeAttributes, die den neuen Typ beschreiben.</param>
	<param name="Parent">Der Typ, von dem der neue Typ erbt.</param>
	<param name="Interfaces">Die Interfaces, die der neue Typ implementiert.</param>
</member><member name="M:OnUtils.Emit.EmitAssembly.Save">
	<summary>
 Schließt offene TypeBuilder, die mit <see cref="T:OnUtils.Emit.EmitAssembly"/>.<see cref="M:OnUtils.Emit.EmitAssembly.DefineType(System.String)"/> definiert wurden und speichert die Assembly bei <see cref="P:OnUtils.Emit.EmitAssembly.FilePath"/> ab.
 </summary>
	<exception cref="T:System.InvalidOperationException">Es handelt sich um eine ausführbare Datei, aber es wurde kein Einstiegspunkt festgelegt.</exception>
</member><member name="T:OnUtils.Emit.EmitAssembly">
	<summary>
 Bietet eine einfache Möglichkeit, Assemblies zu definieren.
 </summary>
</member><member name="F:OnUtils.Wpf.Converters.BooleanOperator.And">
	<summary>
 Wendet ein logisches Und an.
 </summary>
</member><member name="F:OnUtils.Wpf.Converters.BooleanOperator.Or">
	<summary>
 Wendet ein logisches Oder an.
 </summary>
</member><member name="T:OnUtils.Wpf.Converters.BooleanOperator">
	<summary>
 Gibt einen logischen Operator für <see cref="T:OnUtils.Wpf.Converters.BooleanOperatorConverter"/> an.
 </summary>
</member><member name="P:OnUtils.Wpf.Converters.BooleanToBrushConverter.TrueBrush">
	<summary>
 Der <see cref="T:System.Windows.Media.Brush"/>, der verwendet wird, wenn der Boolean True ist.
 </summary>
</member><member name="P:OnUtils.Wpf.Converters.BooleanToBrushConverter.FalseBrush">
	<summary>
 Der <see cref="T:System.Windows.Media.Brush"/>, der verwendet wird, wenn der Boolean False ist.
 </summary>
</member><member name="T:OnUtils.Wpf.Converters.BooleanToBrushConverter">
	<summary>
 Konvertiert zu <see cref="P:OnUtils.Wpf.Converters.BooleanToBrushConverter.TrueBrush"/>, wenn der Boolean True ist, andernfalls zu <see cref="P:OnUtils.Wpf.Converters.BooleanToBrushConverter.FalseBrush"/>.
 Zurückkonvertieren ist ebenfalls möglich.
 </summary>
</member><member name="T:OnUtils.Wpf.Converters.ObjectToBooleanConverter">
	<summary>
 Konvertiert zu <see cref="T:System.Boolean"/>, wenn das Objekt null/Nothing ist, andernfalls zu <see cref="T:System.Boolean"/>.
 Funktioniert nicht mit Wertetypen.
 </summary>
</member><member name="F:OnUtils.Emit.AccessModifiers.Private">
	<summary>
 Nur in der Klasse sichtbar, in dem der Member deklariert ist.
 </summary>
</member><member name="F:OnUtils.Emit.AccessModifiers.Family">
	<summary>
 Nur in der Klasse sichtbar, in dem der Member deklariert ist, und in Klassen, die von dieser Klasse erben.
 </summary>
</member><member name="F:OnUtils.Emit.AccessModifiers.Assembly">
	<summary>
 Nur in Assembly sichtbar, in dem der Member deklariert ist.
 </summary>
</member><member name="F:OnUtils.Emit.AccessModifiers.FamilyAndAssembly">
	<summary>
 Nur in der Klasse sichtbar, in dem der Member deklariert ist, und in Klassen, die von dieser Klasse erben und sich in der Assembly befinden, in der der Member deklariert ist.
 </summary>
</member><member name="F:OnUtils.Emit.AccessModifiers.FamilyOrAssembly">
	<summary>
 Nur in der Klasse sichtbar, in dem der Member deklariert ist, und in Klassen, die von dieser Klasse erben oder sich in der Assembly befinden, in der der Member deklariert ist.
 </summary>
</member><member name="F:OnUtils.Emit.AccessModifiers.Public">
	<summary>
 Überall sichtbar.
 </summary>
</member><member name="T:OnUtils.Emit.AccessModifiers">
	<summary>
 Ein Sichtbarkeitsmodifikator für Member.
 </summary>
</member><member name="F:OnUtils.Resizing.ResizeMode.Uniform">
	<summary>
 Das ursprüngliche Rechteck wird so skaliert, dass es vollständig in das Zielrechteck passt.
 Breite und Höhe des ursprünglichen Rechteckes sind nie größer als Breite und Höhe des Zielrechtecks.
 </summary>
</member><member name="F:OnUtils.Resizing.ResizeMode.UniformToFill">
	<summary>
 Das ursprüngliche Rechteck wird so skaliert, dass es das Zielrechteck vollständig füllt.
 Breite und Höhe des ursprünglichen Rechteckes sind nie kleiner als Breite und Höhe des Zielrechtecks.
 </summary>
</member><member name="T:OnUtils.Resizing.ResizeMode">
	<summary>
 Eine Angabe über die Art, wie <see cref="M:OnUtils.Resizing.Resize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OnUtils.Resizing.ResizeMode)"/> skaliert.
 </summary>
</member><member name="M:OnUtils.Resizing.Resize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,OnUtils.Resizing.ResizeMode)">
	<summary>
 Gibt ein Rechteck mit dem Seitenverhältnis <paramref name="SourceHeight"/> zu <paramref name="SourceWidth"/> zurück, welches sich in der Mitte des durch <paramref name="TargetX"/>, <paramref name="TargetY"/>, <paramref name="TargetWidth"/> und <paramref name="TargetHeight"/> angegebenen Rechtecks befindet.
 Die Größe des neuen Rechtecks wird durch <paramref name="Mode"/> bestimmt. Siehe <see cref="T:OnUtils.Resizing.ResizeMode"/>
	</summary>
	<param name="SourceWidth">Die Breite des ursprünglichen Rechtecks.
 Oder: Der X-Anteil des Seitenverhältnises.</param>
	<param name="SourceHeight">Die Höhe des ursprünglichen Rechtecks.
 Oder: Der Y-Anteil des Seitenverhältnises.</param>
	<param name="TargetX">Die X-Koordinate der linken oberen Ecke des Zielrechtecks.</param>
	<param name="TargetY">Die Y-Koordinate der linken oberen Ecke des Zielrechtecks.</param>
	<param name="TargetWidth">Die Breite des Zielrechtecks.</param>
	<param name="TargetHeight">Die Höhe des Zielrechtecks.</param>
	<param name="Mode">Gibt an, wie skaliert wird. Siehe <see cref="T:OnUtils.Resizing.ResizeMode"/>.</param>
</member><member name="M:OnUtils.Resizing.Resize(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,OnUtils.Resizing.ResizeMode)">
	<summary>
 Gibt ein Rechteck mit dem Seitenverhältnis <paramref name="SourceHeight"/> zu <paramref name="SourceWidth"/> zurück, welches sich in der Mitte des durch <paramref name="TargetX"/>, <paramref name="TargetY"/>, <paramref name="TargetWidth"/> und <paramref name="TargetHeight"/> angegebenen Rechtecks befindet.
 Die Größe des neuen Rechtecks wird durch <paramref name="Mode"/> bestimmt. Siehe <see cref="T:OnUtils.Resizing.ResizeMode"/>
	</summary>
	<param name="SourceWidth">Die Breite des ursprünglichen Rechtecks.
 Oder: Der X-Anteil des Seitenverhältnises.</param>
	<param name="SourceHeight">Die Höhe des ursprünglichen Rechtecks.
 Oder: Der Y-Anteil des Seitenverhältnises.</param>
	<param name="TargetX">Die X-Koordinate der linken oberen Ecke des Zielrechtecks.</param>
	<param name="TargetY">Die Y-Koordinate der linken oberen Ecke des Zielrechtecks.</param>
	<param name="TargetWidth">Die Breite des Zielrechtecks.</param>
	<param name="TargetHeight">Die Höhe des Zielrechtecks.</param>
	<param name="Mode">Gibt an, wie skaliert wird. Siehe <see cref="T:OnUtils.Resizing.ResizeMode"/>.</param>
</member><member name="M:OnUtils.Resizing.Resize(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,OnUtils.Resizing.ResizeMode)">
	<summary>
 Gibt ein Rechteck mit dem Seitenverhältnis <paramref name="SourceHeight"/> zu <paramref name="SourceWidth"/> zurück, welches sich in der Mitte des durch <paramref name="TargetX"/>, <paramref name="TargetY"/>, <paramref name="TargetWidth"/> und <paramref name="TargetHeight"/> angegebenen Rechtecks befindet.
 Die Größe des neuen Rechtecks wird durch <paramref name="Mode"/> bestimmt. Siehe <see cref="T:OnUtils.Resizing.ResizeMode"/>
	</summary>
	<param name="SourceWidth">Die Breite des ursprünglichen Rechtecks.
 Oder: Der X-Anteil des Seitenverhältnises.</param>
	<param name="SourceHeight">Die Höhe des ursprünglichen Rechtecks.
 Oder: Der Y-Anteil des Seitenverhältnises.</param>
	<param name="TargetX">Die X-Koordinate der linken oberen Ecke des Zielrechtecks.</param>
	<param name="TargetY">Die Y-Koordinate der linken oberen Ecke des Zielrechtecks.</param>
	<param name="TargetWidth">Die Breite des Zielrechtecks.</param>
	<param name="TargetHeight">Die Höhe des Zielrechtecks.</param>
	<param name="Mode">Gibt an, wie skaliert wird. Siehe <see cref="T:OnUtils.Resizing.ResizeMode"/>.</param>
</member><member name="T:OnUtils.Resizing">
	<summary>
 Beinhaltet Methoden zum proportionalen Skalieren von Rechtecken.
 </summary>
</member><member name="P:OnUtils.Results.Result.Success">
	<summary>
 True, wenn der Vorgang erfolgreich war, andernfalls False.
 </summary>
</member><member name="T:OnUtils.Results.Result">
	<summary>
 Kapselt eine Angabe über den Erfolg eines Vorganges.
 </summary>
</member><member name="P:OnUtils.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:OnUtils.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:OnUtils.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
</members>
</doc>